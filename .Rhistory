MortgageCashFlow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = original.bal,
settlement.date = settlement.date,
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
original.bal <- OriginalBal(bond.id)
MortgageCashFlow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = original.bal,
settlement.date = settlement.date,
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
proceeds <- Accrued(MortgageCashFlow) +
(original.bal * MBSFactor(bond.id) * PriceBasis(Price))
principal <- original.bal * MBSFactor(bond.id)
CurveSpread <- CurveSpreads(rates.data = rates.data,
CashFlow = MortgageCashFlow,
TermStructure = TermStructure,
proceeds = proceeds)
LifeCPR <- ModelToCPR(
bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
Burnout = Burnout,
original.bal = original.bal,
settlement.date = settlement.date,
price = PriceDecimalString(Price),
yield = YieldToMaturity(MortgageCashFlow)/yield.basis
)
yield.basis <- 100
LifeCPR <- ModelToCPR(
bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
Burnout = Burnout,
original.bal = original.bal,
settlement.date = settlement.date,
price = PriceDecimalString(Price),
yield = YieldToMaturity(MortgageCashFlow)/yield.basis
)
if(grepl("s",scenario) == TRUE){
# initialize term structure object and assign shift vlaue to the
# spot rate curve based on the TermStructure object above
HorizonTermStructure <- new(
"TermStructure",
TradeDate = as.character(
as.Date(rates.data[1,1]) %m+% months(horizon.months)),
Period = numeric(),
Date = "character",
TimePeriod = numeric(),
SpotRate = numeric(),
ForwardRate = numeric(),
DiscRate = numeric(),
TwoYearFwd = numeric(),
TenYearFwd = numeric())
Period(HorizonTermStructure) <- Period(TermStructure)
ForwardDate(HorizonTermStructure) <- as.character(
as.Date(ForwardDate(TermStructure)) %m+% months(horizon.months))
TimePeriod(HorizonTermStructure) <- TimePeriod(TermStructure)
SpotRate(HorizonTermStructure) <- SpotRate(TermStructure)
ForwardRate(HorizonTermStructure) <-ForwardRate(TermStructure)
DiscRate(HorizonTermStructure) <- DiscRate(TermStructure)
TwoYearForward(HorizonTermStructure) <- TwoYearForward(TermStructure)
TenYearForward(HorizonTermStructure) <- TenYearForward(TermStructure)
} else {
HorizonTermStructure <- TermStructure(
rates.data = HorizonCurve,
method = method)
} # End of if logic for term structure method
# This section of code rolls the MBS
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
if(grepl("s",scenario) == TRUE){
# initialize term structure object and assign shift vlaue to the
# spot rate curve based on the TermStructure object above
HorizonTermStructure <- new(
"TermStructure",
TradeDate = as.character(
as.Date(rates.data[1,1]) %m+% months(horizon.months)),
Period = numeric(),
Date = "character",
TimePeriod = numeric(),
SpotRate = numeric(),
ForwardRate = numeric(),
DiscRate = numeric(),
TwoYearFwd = numeric(),
TenYearFwd = numeric())
Period(HorizonTermStructure) <- Period(TermStructure)
ForwardDate(HorizonTermStructure) <- as.character(
as.Date(ForwardDate(TermStructure)) %m+% months(horizon.months))
TimePeriod(HorizonTermStructure) <- TimePeriod(TermStructure)
SpotRate(HorizonTermStructure) <- SpotRate(TermStructure)
ForwardRate(HorizonTermStructure) <-ForwardRate(TermStructure)
DiscRate(HorizonTermStructure) <- DiscRate(TermStructure)
TwoYearForward(HorizonTermStructure) <- TwoYearForward(TermStructure)
TenYearForward(HorizonTermStructure) <- TenYearForward(TermStructure)
} else {
HorizonTermStructure <- TermStructure(
rates.data = HorizonCurve,
method = method)
} # End of if logic for term structure method
# This section of code rolls the MBS
if(grepl("s",scenario) == TRUE){
# initialize term structure object and assign shift vlaue to the
# spot rate curve based on the TermStructure object above
HorizonTermStructure <- new(
"TermStructure",
TradeDate = as.character(
as.Date(rates.data[1,1]) %m+% months(horizon.months)),
Period = numeric(),
Date = "character",
TimePeriod = numeric(),
SpotRate = numeric(),
ForwardRate = numeric(),
DiscRate = numeric(),
TwoYearFwd = numeric(),
TenYearFwd = numeric())
Period(HorizonTermStructure) <- Period(TermStructure)
ForwardDate(HorizonTermStructure) <- as.character(
as.Date(ForwardDate(TermStructure)) %m+% months(horizon.months))
TimePeriod(HorizonTermStructure) <- TimePeriod(TermStructure)
SpotRate(HorizonTermStructure) <- SpotRate(TermStructure)
ForwardRate(HorizonTermStructure) <-ForwardRate(TermStructure)
DiscRate(HorizonTermStructure) <- DiscRate(TermStructure)
TwoYearForward(HorizonTermStructure) <- TwoYearForward(TermStructure)
TenYearForward(HorizonTermStructure) <- TenYearForward(TermStructure)
} else {
HorizonTermStructure <- TermStructure(
rates.data = HorizonCurve,
method = method)
} # End of if logic for term structure method
# This section of code rolls the MBS
horizon.mos <- 12
HorizonMBS <- bond.id
SchedPrincipal <- ScheduledPrin(MortgageCashFlow)[1:horizon.months]
PrepaidPrincipal <- PrepaidPrin(MortgageCashFlow)[1:horizon.months]
DefaultedPrincipal <- DefaultedPrin(MortgageCashFlow)[1:horizon.months]
TotalPrincipal <- sum(SchedPrincipal) +
sum(PrepaidPrincipal) + sum(DefaultedPrincipal)
horizon.months <- 12
SchedPrincipal <- ScheduledPrin(MortgageCashFlow)[1:horizon.months]
PrepaidPrincipal <- PrepaidPrin(MortgageCashFlow)[1:horizon.months]
DefaultedPrincipal <- DefaultedPrin(MortgageCashFlow)[1:horizon.months]
TotalPrincipal <- sum(SchedPrincipal) +
sum(PrepaidPrincipal) + sum(DefaultedPrincipal)
HorizonMBS <- `LastPmtDate<-`(HorizonMBS,
as.character(format(
as.Date(LastPmtDate(bond.id),
format = "%m-%d-%Y") %m+% months(horizon.months),
"%m-%d-%Y")))
HorizonMBS <- `NextPmtDate<-`(HorizonMBS,
as.character(format(
as.Date(NextPmtDate(bond.id),
format = "%m-%d-%Y") %m+% months(horizon.months),
"%m-%d-%Y")))
MBSFactor(HorizonMBS) <- ((original.bal * MBSFactor(bond.id)) - TotalPrincipal)/ original.bal
CurrentBal(HorizonMBS) <- CurrentBal(bond.id) - TotalPrincipal
WAM(HorizonMBS) <- WAM(bond.id) - horizon.months
WALA(HorizonMBS) <- WALA(bond.id) + horizon.months
HorizonPrepaymentAssumption <- PrepaymentModel(
bond.id = HorizonMBS,
MortgageRate = MortgageRate,
TermStructure = HorizonTermStructure,
PrepaymentAssumption = prepayment,
ModelTune = ModelTune,
Severity = 0,
Burnout = Burnout,
begin.cpr = begin.cpr,
end.cpr = end.cpr,
seasoning.period = seasoning.period,
CPR = CPR)
HorizonTermStructure <- new(
"TermStructure",
TradeDate = as.character(
as.Date(rates.data[1,1]) %m+% months(horizon.months)),
Period = numeric(),
Date = "character",
TimePeriod = numeric(),
SpotRate = numeric(),
ForwardRate = numeric(),
DiscRate = numeric(),
TwoYearFwd = numeric(),
TenYearFwd = numeric())
Period(HorizonTermStructure) <- Period(TermStructure)
ForwardDate(HorizonTermStructure) <- as.character(
as.Date(ForwardDate(TermStructure)) %m+% months(horizon.months))
TimePeriod(HorizonTermStructure) <- TimePeriod(TermStructure)
SpotRate(HorizonTermStructure) <- SpotRate(TermStructure)
ForwardRate(HorizonTermStructure) <-ForwardRate(TermStructure)
DiscRate(HorizonTermStructure) <- DiscRate(TermStructure)
TwoYearForward(HorizonTermStructure) <- TwoYearForward(TermStructure)
TenYearForward(HorizonTermStructure) <- TenYearForward(TermStructure)
} else {
HorizonTermStructure <- TermStructure(
rates.data = HorizonCurve,
method = method)
MBSFactor(HorizonMBS) <- ((original.bal * MBSFactor(bond.id)) - TotalPrincipal)/ original.bal
CurrentBal(HorizonMBS) <- CurrentBal(bond.id) - TotalPrincipal
WAM(HorizonMBS) <- WAM(bond.id) - horizon.months
WALA(HorizonMBS) <- WALA(bond.id) + horizon.months
HorizonPrepaymentAssumption <- PrepaymentModel(
bond.id = HorizonMBS,
MortgageRate = MortgageRate,
TermStructure = HorizonTermStructure,
PrepaymentAssumption = prepayment,
ModelTune = ModelTune,
Severity = 0,
Burnout = Burnout,
begin.cpr = begin.cpr,
end.cpr = end.cpr,
seasoning.period = seasoning.period,
CPR = CPR)
HorizonCashFlow <- MortgageCashFlow(
bond.id = HorizonMBS,
original.bal = original.bal,
settlement.date = HorizonSettlement,
price = PriceDecimalString(Price),
PrepaymentAssumption = HorizonPrepaymentAssumption)
HorizonSettlement <- as.Date(
settlement.date, format = "%m-%d-%Y") %m+% months(horizon.months)
HorizonCashFlow <- MortgageCashFlow(
bond.id = HorizonMBS,
original.bal = original.bal,
settlement.date = HorizonSettlement,
price = PriceDecimalString(Price),
PrepaymentAssumption = HorizonPrepaymentAssumption)
NumberofCashFlow <- as.numeric(length(TotalCashFlow(HorizonCashFlow)))
reinvestment.rate <- as.numeric(HorizonCurve[1,2])/yield.basis
InterpolateSpot <- splines::interpSpline(
TimePeriod(HorizonTermStructure),
#difftime(as.Date(ForwardDate(HorizonTermStructure)[1:360]),
#         TradeDate(HorizonTermStructure))/30,
SpotRate(HorizonTermStructure)[1:360],
bSpline = TRUE)
InterpolateSpot <- splines::interpSpline(
TimePeriod(HorizonTermStructure)[1:360],
#difftime(as.Date(ForwardDate(HorizonTermStructure)[1:360]),
#         TradeDate(HorizonTermStructure))/30,
SpotRate(HorizonTermStructure)[1:360],
bSpline = TRUE)
SpotRates <- predict(
InterpolateSpot, TimePeriod(HorizonCashFlow)
months.in.year = 12
SpotRates <- predict(
InterpolateSpot, TimePeriod(HorizonCashFlow))
as.numeric(difftime(as.Date(
PmtDate(HorizonCashFlow)),
as.Date(TradeDate(HorizonTermStructure)))/30) / months.in.year
n.period = as.numeric(difftime(as.Date(
PmtDate(HorizonCashFlow)),
as.Date(TradeDate(HorizonTermStructure)))/30) / months.in.year
DiscountRate <-
(1+((SpotRates$y + horizon.spot.spread)/yield.basis))^ n.period
DiscountRate <- 1/DiscountRate
DiscountRate <-
(1+((SpotRates$y + horizon.spot.spread)/yield.basis))^ n.period
horizon.spot.spread <- ZeroVolSpread(CurveSpreads)
DiscountRate <-
(1+((SpotRates$y + horizon.spot.spread)/yield.basis))^ n.period
DiscountRate <- 1/DiscountRate
HorizonPresentValue <-
DiscountRate * TotalCashFlow(HorizonCashFlow)
PresentValue <- sum(HorizonPresentValue)
InterpolateCurve <- splines::interpSpline(as.numeric(rates.data[2,2:12]),
as.numeric(rates.data[1,2:12]),
bSpline = TRUE)
predict(InterpolateCurve, WAL(HorizonCashFlow))
predict(InterpolateCurve, WAL(HorizonCashFlow))$y
horizon.nominal.spread = 1.1
HorizonYield <-
predict(InterpolateCurve, WAL(HorizonCashFlow))$y + horizon.nominal.spread
HorizonYield <- rep(HorizonYield, NumberofCashFlow)
DiscountRate <- 1/((1 + (HorizonYield/monthly.yield.basis))^
(Period(HorizonTermStructure)[1:NumberofCashFlow]))
library(BondLab)
knitr::opts_chunk$set(cache=FALSE)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
APIKEY <- "31df8645e635484db99e5d1133ce9245"
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "dl")))
bond.id <- MBS(cusip = cusip)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
PassThrough <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# curve spreads are also returned in the mortgagescenario object
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
NoChangeScenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
HorizonReturn(NoChangeScenario)
ZeroVolSpread(NoChangeScenario)
SpreadToCurve(NoChangeScenario)
SpreadToBenchmark(NoChangeScenario)
BenchMark(NoChangeScenario)
WAL(PassThrough)
MyScenario <- function(bond.id = "character",
trade.date = "character",
settlement.date = "character",
prepayment = "character",
...,
price = NULL,
spread = NULL,
CPR = numeric()){
Price <- PriceTypes(price = price)
bond.id <- MBS(MBS.id = bond.id)
rates.data <- Rates(trade.date = trade.date)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "ns")))
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = prepayment,
CPR = CPR)
CashFlow <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
Scenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
return(Scenario)
}
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
build_vignettes('~/BondLab')
library(BondLab)
install.packages("roxygen2")
install.packages("termstrc")
install.packages("lubridate")
install.packages("optimx")
install.packages("RCurl")
install.packages("RSQLite")
install.packages("sql")
install.packages("sqldf")
install.packages("bizdays")
install.packages("xml")
install.packages("XML")
library(BondLab)
install.packages("testthat")
install.packages("rmarkdown")
library(BondLab)
require(RPostgreSQL)
require(ggplot2)
require(themes)
require(cowplot)
source('~/bondlab-treasury/USTDatabase.R')
dsn <- 'bondlab.cluster-cz3qydrtzs4z.us-east-1.rds.amazonaws.com'
drv <- DBI::dbDriver("PostgreSQL")
DBI::dbConnect(drv,
dbname = "bondlab",
user = 'bondlab',
password = 'es1IqIcY$',
host = dsn,
port = 5432)
conn <- get.treasury.database.connection()
sql <-
"with tenyear as (
select
cusip
from
treasury_securities
where
securitytermweekyear = '10-Year'
and
reopening = FALSE
and
auctiondate > '01-01-2013')
select
TSP.pricedate
,TSP.spreadzv
,TDS.status
from
treasury_special_prices TSP
join
tenyear
on
tenyear.cusip = TSP.cusip
join
treasury_daily_status TDS
on
TSP.pricedate = TDS.date
and
TSP.cusip = TDS.cusip"
sql <-
"
select
date
,round(yield_10year,4) as year10
from
bondlab_par_bond_curve
where
date >= '01-01-2013'
"
sqlquery <- sqlInterpolate(ANSI(), sql)
ZVspreads <- dbGetQuery(conn, sqlquery)
ZVspreads$BondStatus <- as.factor(ZVspreads$status)
ZVspreads$BondStatus <- factor(ZVspreads$BondStatus,
levels = c('otr', 'ftr1', 'ftr2', 'ftr3', 'ftr4', 'ftr5', 'ftr6'))
sql <-
"
select
date
,round(yield_10year,4) as year10
from
bondlab_par_bond_curve
where
date >= '01-01-2013'
"
sqlquery <- sqlInterpolate(ANSI(), sql)
yield10 <- dbGetQuery(conn, sqlquery)
ZVSpread <- ggplot(ZVspreads, aes(x = pricedate, y = spreadzv, color = BondStatus))+
theme_minimal() +
geom_point(alpha = .5) +
labs(x = 'ZV Spread',
y = 'Date',
title = '10-year OTR through FTR6 ZV Spread Analysis') +
scale_color_tableau(palette = 'tableau10') +
guides(colour = guide_legend(nrow = 1)) +
theme(legend.position = 'bottom')
Yield10 <- ggplot(yield10, aes(x = date, y = year10)) +
theme_minimal() +
geom_line(color = 'blue', lwd = 1) +
labs(x = 'Date',
y = 'Yield',
title = '10-year Yield History')
ggplot(ZVspreads, aes(x = spreadzv, fill = BondStatus)) +
geom_histogram() +
guides(colour = guide_legend(nrow = 1)) +
scale_fill_tableau(palette = 'tableau10') +
labs(title = '10-year ZV Spread Distibution by Stastus')+
theme(legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(~BondStatus)
ggsave('~/bondlab-treasury/zspread_dist.png', height = 4, width = 6)
plot_grid(ZVSpread, Yield10, nrow = 2)
ggsave('~/bondlab-treasury/zspread.png', height = 4, width = 6)
