cusiplist.cusip = tsp.cusip
join
treasury_securities ts
on
ts.cusip = tsp.cusip
where ts.reopening = ?reopen
order by maturitydate asc
'
sqlquery <- sqlInterpolate(ANSI(), sql, date = '2018-08-03', reopen = 'FALSE')
OTRbonds <- dbGetQuery(conn, sqlquery)
CashFlowMatrix <- CreateCashFlowMatrix('2018-08-03', bonddata = OTRbonds)
MaturityMatrix <- CreateMaturitiesMatrix('2018-08-03', bonddata = OTRbonds)
library(BondLab)
readRDS('~\BondLab\inst\PrepaymentModel\MtgRate.rds')
readRDS('~/BondLab/inst/PrepaymentModel/MtgRate.rds')
readRDS('~/BondLab/inst/PrepaymentModel/MortgagegRate.rds')
readRDS('~/BondLab/inst/PrepaymentModel/MortgageRate.rds')
library(BondLab)
require(RPostgreSQL)
require(caret)
require(BalancedSampling)
require(gbm)
require(Matrix)
require(xgboost)
require(data.table)
require(tidyr)
require(scales)
require(ggplot2)
require(ggthemes)
drv <- DBI::dbDriver("PostgreSQL")
conn <- DBI::dbConnect(drv,
dbname = 'FHLMC',
user = 'postgres',
password = 'Kodiak1961',
host = 'localhost',
port = 5433)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('tba')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
sample <- landingphase(prob, probflight, auxvariables)
train <- as.data.frame(loandatatable[sample==1,1], stringsAsFactors = FALSE)
colnames(train) <- c('loannum')
test <- as.data.frame(loandatatable[sample ==0,1], stringsAsFactors = FALSE)
colnames(test) <- c('loannum')
dbWriteTable(conn, 'trainloans', train, row.names = FALSE, overwrite = TRUE)
dbWriteTable(conn, 'testloans', test, row.names = FALSE, overwrite = TRUE)
# Note: without SATO the AUC measure is no better than .50 over 100 training sessions
# the model with SATO hits 98% on the AUC score.
sql <-
'
with sato(loannum, sato) as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
mtgrate as (
select * from mtgrate()
),
loanage as (
select * from loanage()
)
select
loanage.loanage_1 as age
--,loanage.loanage_2 as age_2
--,loanage.loanage_3 as age_3
,extract(month from loandata.period) as month
,loandata.noterate - (mtgrate.mtgrate + sato) as incentive
,loandata.noterate - (mtgrate.mtgrate_2 + sato) as incentive_2
,loandata.noterate - (mtgrate.mtgrate_3 + sato) as incentive_3
,loandata.ultv as mtmltv
,CASE when loandata.period = loandatatable.period then loandatatable.event else 0 end as event
from
loandata
join
trainloans
on
trainloans.loannum = loandata.loannum
join
loandatatable
on
loandatatable.loannum = loandata.loannum
join
sato
on
sato.loannum = loandatatable.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join
loanage
on
loanage.loannum = loandata.loannum
and
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
modeldata <- modeldata[complete.cases(modeldata),]
data = as.matrix(modeldata[, !(names(modeldata) %in% c('event'))])
data = Matrix(data, sparse = TRUE)
label = as.numeric(modeldata[, (names(modeldata) %in% c('event'))])
xgboost_model <- xgboost(data = data,
label = label,
nrounds = 10000,
eta = 0.1,
max.depth = 4,
min.child.weight = 1,
max.delta.step = 0,
subsample = 1,
nthread = 4,
objective = 'binary:logistic',
eval.metric = 'auc')
xgb.save(xgboost_model, 'xgboost_model')
sql <-
"
with minage (loannum, period, age) as
(
select
loannum
,period
,age
from
(select loannum, period, age, rank() over (partition by loannum order by loannum asc, period asc) from
loandata) as rank
where rank = 1
),
loanage as
(
select * from loanage()
),
sato as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
origyear as
(
select
loannum
,date_part('year', period - age * cast('1 month' as interval)) as origyear
,period
,age
from minage
),
mtgrate as (select * from mtgrate())
select
loandata.period
,origyear
,cast(sum(currbal * loanage.loanage_1)/sum(currbal) as int) as age
--,cast(sum(currbal * loanage.loanage_2)/sum(currbal) as int) as age_2
--,cast(sum(currbal * loanage.loanage_3)/sum(currbal) as int) as age_3
,date_part('month', loandata.period) as month
,sum(currbal * (noterate - (mtgrate.mtgrate+sato)))/sum(currbal) as incentive
,sum(currbal * (noterate - (mtgrate.mtgrate_2+sato)))/sum(currbal) as incentive_2
,sum(currbal * (noterate - (mtgrate.mtgrate_3+sato)))/sum(currbal) as incentive_3
,sum(currbal * ultv)/sum(currbal) as mtmltv
,sum(currbal * (case when event = 2 then 1 else event end))/sum(currbal) as smm
from
loandata
join
origyear
on
origyear.loannum = loandata.loannum
join sato
on
sato.loannum = loandata.loannum
join
testloans
on
testloans.loannum = loandata.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join loanage
on
loanage.period = loandata.period
and
loanage.loannum = loandata.loannum
where loandata.age > 0
and
noterate - (mtgrate.mtgrate_3+sato) is not NULL
group by loandata.period, origyear
"
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
#create predicted dataset
drop <- c('period', 'origyear', 'smm')
preddata <- as.matrix(modeldata[ , !(names(modeldata) %in% drop)])
preddata <- Matrix(preddata, sparse = TRUE)
predicted <- predict(xgboost_model, newdata = preddata, type = 'response')
modeldata$predicted <- predicted
dbWriteTable(conn, 'modelresult', modeldata, row.names = FALSE, overwrite = TRUE)
sql <-
"
select
period
,origyear
,(1-power(1-smm,12)) * 100  as actual
,(1-power(1-predicted,12)) * 100 as model
from
modelresult
"
sqlquery <- sqlInterpolate(ANSI(), sql)
plotdata <- dbGetQuery(conn, sqlquery)
plotdata <- gather(plotdata, variable, value, -period, -origyear)
ggplot(plotdata, aes(x = period, y = value, color = variable)) +
geom_line()+
theme_minimal()+
labs(y = 'CPR(%)',
x = 'Date') +
scale_x_date(date_breaks = '6 month', labels = date_format('%m-%Y'))+
scale_colour_tableau(palette = 'tableau10') +
theme(legend.title = element_blank(),
legend.position = 'right',
axis.text.x = element_text(angle = 90)) +
facet_wrap(~origyear, ncol = 2)
ggsave('~/Documents/bondlabprepaymentmodel/xgboostviz.pdf', height = 12, width = 8)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('tba')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
sample <- landingphase(prob, probflight, auxvariables)
train <- as.data.frame(loandatatable[sample==1,1], stringsAsFactors = FALSE)
colnames(train) <- c('loannum')
test <- as.data.frame(loandatatable[sample ==0,1], stringsAsFactors = FALSE)
colnames(test) <- c('loannum')
dbWriteTable(conn, 'trainloans', train, row.names = FALSE, overwrite = TRUE)
dbWriteTable(conn, 'testloans', test, row.names = FALSE, overwrite = TRUE)
# Note: without SATO the AUC measure is no better than .50 over 100 training sessions
# the model with SATO hits 98% on the AUC score.
sql <-
'
with sato(loannum, sato) as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
mtgrate as (
select * from mtgrate()
),
loanage as (
select * from loanage()
)
select
loanage.loanage_1 as age
--,loanage.loanage_2 as age_2
--,loanage.loanage_3 as age_3
,extract(month from loandata.period) as month
,loandata.noterate - (mtgrate.mtgrate + sato) as incentive
,loandata.noterate - (mtgrate.mtgrate_2 + sato) as incentive_2
,loandata.noterate - (mtgrate.mtgrate_3 + sato) as incentive_3
,loandata.ultv as mtmltv
,CASE when loandata.period = loandatatable.period then loandatatable.event else 0 end as event
from
loandata
join
trainloans
on
trainloans.loannum = loandata.loannum
join
loandatatable
on
loandatatable.loannum = loandata.loannum
join
sato
on
sato.loannum = loandatatable.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join
loanage
on
loanage.loannum = loandata.loannum
and
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
modeldata <- modeldata[complete.cases(modeldata),]
data = as.matrix(modeldata[, !(names(modeldata) %in% c('event'))])
data = Matrix(data, sparse = TRUE)
label = as.numeric(modeldata[, (names(modeldata) %in% c('event'))])
xgboost_model <- xgboost(data = data,
label = label,
nrounds = 10000,
eta = 0.1,
max.depth = 4,
min.child.weight = 1,
max.delta.step = 0,
subsample = 1,
nthread = 4,
objective = 'binary:logistic',
eval.metric = 'auc')
xgb.save(xgboost_model, 'xgboost_model')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/xgboost_model')
xgb.save(xgboost_model, '~\Documents\bondlabprepaymentmodel\xgboost_model')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel')
xgb.save(xgboost_model, '~Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, '~users/Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, 'Users/glennschultz/Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/tba')
xgb.save(xgboost_model, 'tba')
xgb.save(xgboost_model, '~/Documents/tba')
xgb.save(xgboost_model, '~/Documents/')
xgb.save(xgboost_model, 'tba')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/tba')
View(xgboost_model)
saveRDS(xgboost_model, '~/Documents/bondlabprepaymentmodel/tba')
xgboost_model_test <- readRDS('~/Documents/bondlabprepaymentmodel/tba')
sql <-
"
with minage (loannum, period, age) as
(
select
loannum
,period
,age
from
(select loannum, period, age, rank() over (partition by loannum order by loannum asc, period asc) from
loandata) as rank
where rank = 1
),
loanage as
(
select * from loanage()
),
sato as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
origyear as
(
select
loannum
,date_part('year', period - age * cast('1 month' as interval)) as origyear
,period
,age
from minage
),
mtgrate as (select * from mtgrate())
select
loandata.period
,origyear
,cast(sum(currbal * loanage.loanage_1)/sum(currbal) as int) as age
--,cast(sum(currbal * loanage.loanage_2)/sum(currbal) as int) as age_2
--,cast(sum(currbal * loanage.loanage_3)/sum(currbal) as int) as age_3
,date_part('month', loandata.period) as month
,sum(currbal * (noterate - (mtgrate.mtgrate+sato)))/sum(currbal) as incentive
,sum(currbal * (noterate - (mtgrate.mtgrate_2+sato)))/sum(currbal) as incentive_2
,sum(currbal * (noterate - (mtgrate.mtgrate_3+sato)))/sum(currbal) as incentive_3
,sum(currbal * ultv)/sum(currbal) as mtmltv
,sum(currbal * (case when event = 2 then 1 else event end))/sum(currbal) as smm
from
loandata
join
origyear
on
origyear.loannum = loandata.loannum
join sato
on
sato.loannum = loandata.loannum
join
testloans
on
testloans.loannum = loandata.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join loanage
on
loanage.period = loandata.period
and
loanage.loannum = loandata.loannum
where loandata.age > 0
and
noterate - (mtgrate.mtgrate_3+sato) is not NULL
group by loandata.period, origyear
"
xgboost_model_test <- readRDS('~/Documents/bondlabprepaymentmodel/tba')
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
#create predicted dataset
drop <- c('period', 'origyear', 'smm')
preddata <- as.matrix(modeldata[ , !(names(modeldata) %in% drop)])
preddata <- Matrix(preddata, sparse = TRUE)
predicted <- predict(xgboost_model_test, newdata = preddata, type = 'response')
modeldata$predicted <- predicted
dbWriteTable(conn, 'modelresult', modeldata, row.names = FALSE, overwrite = TRUE)
sql <-
"
select
period
,origyear
,(1-power(1-smm,12)) * 100  as actual
,(1-power(1-predicted,12)) * 100 as model
from
modelresult
"
sqlquery <- sqlInterpolate(ANSI(), sql)
plotdata <- dbGetQuery(conn, sqlquery)
plotdata <- gather(plotdata, variable, value, -period, -origyear)
ggplot(plotdata, aes(x = period, y = value, color = variable)) +
geom_line()+
theme_minimal()+
labs(y = 'CPR(%)',
x = 'Date') +
scale_x_date(date_breaks = '6 month', labels = date_format('%m-%Y'))+
scale_colour_tableau(palette = 'tableau10') +
theme(legend.title = element_blank(),
legend.position = 'right',
axis.text.x = element_text(angle = 90)) +
facet_wrap(~origyear, ncol = 2)
ggsave('~/Documents/bondlabprepaymentmodel/xgboostviz.pdf', height = 12, width = 8)
date <- as.Date('03-01-2018', format = '%m-%d-%Y')
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
date + days(55)
date + month(-1)
date + month(-1) + days(55)
date + month(-1)
date + month(-2)
date <- as.Date('02-01-2018', format = '%m-%d-%Y')
date + days(55)
library(BondLab)
PPC.Ramp(.002, .06, 30)
PPC.Ramp(.002, .06, 30, seq(1, 60, 1))
PPC.Ramp(.2, 6, 30, seq(1, 60, 1))
PPC.Ramp(begin.cpr = .2, end.cpr = 6, season.period = 30, period = seq(1, 60, 1))
library(BondLab)
