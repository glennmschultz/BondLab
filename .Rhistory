Price_32nds = Convertto32nds(price = price)
Price_Basis = format(as.numeric(price) / PriceBasis, nsmall = 8)
Price_Decimal_String = ConverttoString(
price.decimal = as.numeric(Price_Decimal))
}
if(grepl("-", as.character(price), fixed = TRUE) == TRUE){
Price_Decimal = as.numeric(ConverttoDecimal(price = price))
Price_32nds = price
Price_Basis = as.numeric(format(as.numeric(Price_Decimal)/PriceBasis, nsmall = 8))
Price_Decimal_String = ConverttoString(
price.decimal = as.numeric(ConverttoDecimal(price = price)))
}
new("PriceTypes",
PriceDecimal = as.numeric(Price_Decimal),
Price32nds = Price_32nds,
PriceBasis = as.numeric(Price_Basis),
PriceDecimalString = Price_Decimal_String
)
}
library(BondLab)
dbname= paste0(system.file(package = "BondLab"), "/BondData/BondData")
paste0(system.file(package = "BondLab"), "/BondData/BondData")
BondData <- dbConnect(SQLite(), dbname= paste0(system.file(package = "BondLab"), "/BondData/BondData"))
library(BondLab)
2.15/.05
2.142/.05
2.13/.05
2.138/.05
library(BondLab)
5/3200 * 1000000
library(BondLab)
500 * 5000
500 * 1000
500 * 500
500 * 500 * 12
200000/10
200000/120
1500 * 11 * 12
200000/30
200000/30/12
library(BondLab)
original.bal =1000000
library(BondLab)
\includegraphics[scale=.75]{ch4_1.eps}
knitr::opts_chunk$set(cache=FALSE)
require(ggplot2)
require(reshape2)
require(scales)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "ns")))
bond.id <- MBS(cusip = cusip)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
PassThrough <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# curve spreads are also returned in the mortgagescenario object
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
NoChangeScenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
HorizonReturn(NoChangeScenario)
ZeroVolSpread(NoChangeScenario)
SpreadToCurve(NoChangeScenario)
SpreadToBenchmark(NoChangeScenario)
BenchMark(NoChangeScenario)
WAL(PassThrough)
MyScenario <- function(bond.id = "character",
trade.date = "character",
settlement.date = "character",
prepayment = "character",
...,
price = NULL,
spread = NULL,
CPR = numeric()){
Price <- PriceTypes(price = price)
bond.id <- MBS(MBS.id = bond.id)
rates.data <- Rates(trade.date = trade.date)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "ns")))
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = prepayment,
CPR = CPR)
CashFlow <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
Scenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
return(Scenario)
}
devtools::build_vignettes('BondLab')
devtools::build_vignettes('~/BondLab/')
library(BondLab)
unlink('inst/doc/BondLab_cache', recursive = TRUE)
getwd()
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
devtools::build_vignettes('~/BondLab/')
library(BondLab)
12/2
as.Date("05-31-2017", %m-%d-%Y)
as.Date("05-31-2017", "%m-%d-%Y")
seq(as.Date("05-31-2017", "%m-%d-%Y"), c(100, 101, 103), "days")
seq(as.Date("05-31-2017", "%m-%d-%Y"), as.Date("05-31-1019, format = "m-%d-%Y"), c(100, 101, 103), "days")
seq(1, 24, 1)
seq(1, 24, 1) * 6
months <- seq(1, 24, 1) * 6
library(BondLab)
.75/.5
floor(.75/.5)
ceiling(.75/.5)
.5/.5
.3/.5
floor(.3/.5)
4.3 * 2
round(4.3)
round(4.6)
round(4.6,2)
round(4.6,1)
floor(.5)
floor(.6)
ceiling(.6)
ceiling(.3)
floor(4.6)
(4.2)
floor(4.6)
floor(4.2)
floor(4.6)
floor(4.8)
number = .75
floor(number)
ceiling(number - floor(number))
library(BondLab)
.75 %/% .25
.75 %/% .0833
.75 %/% .5
12 * .75
5.2 %/% .25
5 %/% .25
4.9 %/% .25
4.75 %/% .25
4.7 %/% .25
library(BondLab)
#create a connection to the MBS database
BondData <- dbConnect(SQLite(), dbname='/Users/glennschultz/BondLab/inst/BondData/BondData')
dbRemoveTable(BondData, 'USTBonds')
require(sqldf)
require(RSQLite)
require(BondLab)
dbRemoveTable(BondData, 'USTBonds')
BondData <- dbConnect(SQLite(), dbname='/Users/glennschultz/BondLab/inst/BondData/BondData')
dbRemoveTable(BondData, 'USTBonds')
require(sqldf)
require(RSQLite)
require(BondLab)
#create a connection to the MBS database
BondData <- dbConnect(SQLite(), dbname='/Users/glennschultz/BondLab/inst/BondData/BondData')
dbWriteTable(conn = BondData,
name = "USTBonds",
value = read.csv(paste0("~/Investing-In-MBS/USTBonds.csv")),
row.names = FALSE,
header = TRUE,
append = TRUE,
colClasses = c('character', #Cusip
'character', #Id
'character', #BondType
'character', #Sector
'character', #Issuer
'character', #Underwriter
'numeric',   #OfferAmount
'numeric',   #Coupon
'character', #IssueDate
'character', #DatedDate
'character', #MaturityDate
'character', #LastPmtdate
'character', #NextPmtDate
'character', #Moody
'character', #SP
'character', #BondLab
'numeric',   #Frequency
'character', #BondBasis
'logical',   #Callable
'locical',   #Putable
'logical'    #Sinkingfund
))
library(BondLab)
cbbPalette <- tableau_color_pal("tableau10")
require(ggplot2)
require(reshape2)
require(scales)
require(termstrc)
orig.bal = 1000000
bond.id <- MBS(cusip = "31283HY41")
Rates <- Rates(trade.date = "05-19-2017")
MortgageRate <- MtgRate()
Burnout <- BurnOut(bond.id)
ModelTune <- ModelTune(bond.id = bond.id)
TermStructure <- TermStructure(rates.data = Rates,
method = "dl")
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
cashflow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = orig.bal,
settlement.date = "05-23-2017",
price = "100-03.5",
PrepaymentAssumption = Prepayment)
Key.Rate.Duration <- MtgTermStructure(
bond.id = bond.id,
original.bal = orig.bal,
Rate.Delta = .25,
TermStructure = TermStructure,
settlement.date = "05-23-2017",
principal = 1000000,
price = "100-03.5",
cashflow = cashflow)
Key.Rate.Duration <-
cbind(Key.Rate.Duration@KeyRateTenor,
Key.Rate.Duration@KeyRateDuration)
colnames(Key.Rate.Duration) <-
c("Tenor", "Duration")
Key.Rate.Duration
Key.Rate.Duration <- as.data.frame(Key.Rate.Duration)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = 'tableau20', guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
rates <- Rates(trade.date = "05-19-2017")
spot <- TermStructure(rates.data = rates, method = 'dl')
View(Key.Rate.Duration)
sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[1:3,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[4:5,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[6,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[7,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[8,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[9,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[10,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
sum(Key.Rate.Duration[11,'Duration'])/sum(Key.Rate.Duration[,'Duration'])
require(ggthemes)
orig.bal = 1000000
bond.id <- MBS(cusip = "31283HY41")
Rates <- Rates(trade.date = "05-19-2017")
MortgageRate <- MtgRate()
Burnout <- BurnOut(bond.id)
ModelTune <- ModelTune(bond.id = bond.id)
TermStructure <- TermStructure(rates.data = Rates,
method = "dl")
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
cashflow <- MortgageCashFlow(
bond.id = bond.id,
original.bal = orig.bal,
settlement.date = "05-23-2017",
price = "100-03.5",
PrepaymentAssumption = Prepayment)
Key.Rate.Duration <- MtgTermStructure(
bond.id = bond.id,
original.bal = orig.bal,
Rate.Delta = .25,
TermStructure = TermStructure,
settlement.date = "05-23-2017",
principal = 1000000,
price = "100-03.5",
cashflow = cashflow)
Key.Rate.Duration <-
cbind(Key.Rate.Duration@KeyRateTenor,
Key.Rate.Duration@KeyRateDuration)
colnames(Key.Rate.Duration) <-
c("Tenor", "Duration")
Key.Rate.Duration
Key.Rate.Duration <- as.data.frame(Key.Rate.Duration)
ggplot(Key.Rate.Duration,
aes(x = as.factor(Tenor), y = Duration, fill = as.factor(Tenor))) +
geom_bar(stat = "identity")+
theme_minimal()+
theme(panel.grid.major = element_line(size = .25, color = "grey"))+
geom_bar(stat = "identity") +
scale_fill_tableau(palette = 'tableau20', guide = "none") +
ylab("Key Rate Duration") +
xlab("Key Rate Tenor (years)") +
theme(axis.text = element_text(size = 10)) +
theme(axis.title = element_text(size = 13))
ggsave("ch3_6.eps",
path = "~/Investing-In-MBS/Chapter03",
width = 6,
height = 4)
rates <- Rates(trade.date = "05-19-2017")
spot <- TermStructure(rates.data = rates, method = 'dl')
library(BondLab)
20/(2 * 20)
max(0,30-31)
library(BondLab)
difftime(as.Date('2017-05-17'), as.Date('2017-01-17'), units = 'days')
difftime(as.Date('2017-05-17'), as.Date('2017-01-17'), units = 'days')/365
difftime(as.Date('2017-05-17'), as.Date('2016-12-17'), units = 'days')/365
library(BondLab)
1.03 * 85000
1.05^20/1.04^30
(1.05^20/1.04^30) 85000
(1.05^20/1.04^30) * 85000
(1.05^20/1.045^30)
(1.05^20/1.05^30)
1/(1.05^20/1.05^30)
(1.05^20/1.05^30)
(1.05^20/1.03^30)
(1.05^20/1.04^30)
(1.05^20/1.05^30)
(1.05^20/1.05^20)
(1.05^20/1.05^30)
(1.05^20/1.03^30)
(1.05^15/1.045^15)
(1.05^20/1.045^15)
(1.05^12/1.045^15)
(1.05^11/1.045^15)
(1.05^14/1.045^15)
(1.05^13/1.045^15)
3000/100000
3000/200000
library(BondLab)
require(sqldf)
require(RSQLite)
#create a connection to the MBS database
LoanData <- dbConnect(SQLite(), dbname='/Users/glennschultz/Documents/LoanLevelData/LoanData')
dbRemoveTable(LoanData, 'Loan')
dbWriteTable(conn = LoanData,
name = "Loan",
value = read.csv("~/Documents/LoanLevelData/modeldata.csv"),
row.names = FALSE,
header = TRUE,
append = FALSE,
overwrite = TRUE,
sep = ",",
eol = "\n",
colClasses = c('character', #LoanNum
'character', #Period
'character', #Purpose
'character', #PropertyType
'character', #Occupancy
'character', #Channel
'numeric',   #OrigBal
'numeric',   #CurrBal
'numeric',   #ULTV
'numeric',   #OrigCLTV
'numeric',   #OrigLTV
'numeric',   #OrigDTI
'numeric',   #ProdType
'numeric',   #OrigInterestRate
'numeric',   #OrigLoanTerm
'numeric',   #LoanAge
'numeric',   #Incentive
'numeric',   #IncentiveRatio
'numeric',   #DQ
'character', #State
'numeric'    #eventcode
))
dbListTables(LoanData)
dbGetQuery(LoanData, 'Select * from Loan limit 10')
library(BondLab)
1.08^2
library(BondLab)
492/12
library(BondLab)
difftime('01-01-2018', '02-10-2018')
difftime('02-01-2018', '01-10-2018')
difftime('02-01-2018', '01-01-2018')
difftime('2018-02-01', '2018-01-01')
difftime('2018-02-01', '2018-08-01')
difftime('2018-08-01', '2018-01-01')
difftime('2018-08-01', '2018-01-01')/365
difftime('2018-03-01', '2018-01-01')
59/211
59/365
211/365
.161/578
.161/.578
.16116/.57808
library(BondLab)
ActFactor(settlement.date = '2018-01-01', lastpmt.date = '2018-01-01', nextpmt.date = '2020-01-01')
library(BondLab)
ActFactor(settlement.date = '2018-01-01', lastpmt.date = '2018-01-01', nextpmt.date = '2020-01-01')
datediff('2018-01-01', '201-01-01')
library(BondLab)
ActFactor(settlement.date = '2018-01-01', lastpmt.date = '2018-01-01', nextpmt.date = '2020-01-01')
library(BondLab)
ActFactor(settlement.date = '2018-01-01', lastpmt.date = '2018-01-01', nextpmt.date = '2020-01-01')
diff.difftime('2020-01-01', '2018-01-01', units = 'months')
diff.difftime('2020-01-01', '2018-01-01', units = 'days')
difftime('2020-01-01', '2018-01-01', units = 'days')
difftime('2020-01-01', '2018-01-01', units = 'days')/180
365.25/2
difftime('2020-01-01', '2018-01-01', units = 'days')/182.625
difftime('2020-01-01', '2018-01-01', units = 'days')/4
difftime('2020-01-01', '2018-01-01', units = 'days')/182.5
182.5 *2
ActFactor(settlement.date = '2018-01-01', lastpmt.date = '2018-01-01', nextpmt.date = '2020-01-01')
200000000 * .5
200000000 * .5 * .05
200000000 * .3 * .05
library(BondLab)
is.null(NULL)
library(BondLab)
15920.28 * .015
15920.28 * .01
15950.28 * 1.01
(15950.28 * 1.01)- 5000
library(BondLab)
