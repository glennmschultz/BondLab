<<<<<<< HEAD
"%m-%d-%Y")))
MBSFactor(HorizonMBS) <- ((original.bal * MBSFactor(bond.id)) - TotalPrincipal)/ original.bal
CurrentBal(HorizonMBS) <- CurrentBal(bond.id) - TotalPrincipal
WAM(HorizonMBS) <- WAM(bond.id) - horizon.months
WALA(HorizonMBS) <- WALA(bond.id) + horizon.months
HorizonPrepaymentAssumption <- PrepaymentModel(
bond.id = HorizonMBS,
MortgageRate = MortgageRate,
TermStructure = HorizonTermStructure,
PrepaymentAssumption = prepayment,
ModelTune = ModelTune,
Severity = 0,
Burnout = Burnout,
begin.cpr = begin.cpr,
end.cpr = end.cpr,
seasoning.period = seasoning.period,
CPR = CPR)
HorizonTermStructure <- new(
"TermStructure",
TradeDate = as.character(
as.Date(rates.data[1,1]) %m+% months(horizon.months)),
Period = numeric(),
Date = "character",
TimePeriod = numeric(),
SpotRate = numeric(),
ForwardRate = numeric(),
DiscRate = numeric(),
TwoYearFwd = numeric(),
TenYearFwd = numeric())
Period(HorizonTermStructure) <- Period(TermStructure)
ForwardDate(HorizonTermStructure) <- as.character(
as.Date(ForwardDate(TermStructure)) %m+% months(horizon.months))
TimePeriod(HorizonTermStructure) <- TimePeriod(TermStructure)
SpotRate(HorizonTermStructure) <- SpotRate(TermStructure)
ForwardRate(HorizonTermStructure) <-ForwardRate(TermStructure)
DiscRate(HorizonTermStructure) <- DiscRate(TermStructure)
TwoYearForward(HorizonTermStructure) <- TwoYearForward(TermStructure)
TenYearForward(HorizonTermStructure) <- TenYearForward(TermStructure)
} else {
HorizonTermStructure <- TermStructure(
rates.data = HorizonCurve,
method = method)
MBSFactor(HorizonMBS) <- ((original.bal * MBSFactor(bond.id)) - TotalPrincipal)/ original.bal
CurrentBal(HorizonMBS) <- CurrentBal(bond.id) - TotalPrincipal
WAM(HorizonMBS) <- WAM(bond.id) - horizon.months
WALA(HorizonMBS) <- WALA(bond.id) + horizon.months
HorizonPrepaymentAssumption <- PrepaymentModel(
bond.id = HorizonMBS,
MortgageRate = MortgageRate,
TermStructure = HorizonTermStructure,
PrepaymentAssumption = prepayment,
ModelTune = ModelTune,
Severity = 0,
Burnout = Burnout,
begin.cpr = begin.cpr,
end.cpr = end.cpr,
seasoning.period = seasoning.period,
CPR = CPR)
HorizonCashFlow <- MortgageCashFlow(
bond.id = HorizonMBS,
original.bal = original.bal,
settlement.date = HorizonSettlement,
price = PriceDecimalString(Price),
PrepaymentAssumption = HorizonPrepaymentAssumption)
HorizonSettlement <- as.Date(
settlement.date, format = "%m-%d-%Y") %m+% months(horizon.months)
HorizonCashFlow <- MortgageCashFlow(
bond.id = HorizonMBS,
original.bal = original.bal,
settlement.date = HorizonSettlement,
price = PriceDecimalString(Price),
PrepaymentAssumption = HorizonPrepaymentAssumption)
NumberofCashFlow <- as.numeric(length(TotalCashFlow(HorizonCashFlow)))
reinvestment.rate <- as.numeric(HorizonCurve[1,2])/yield.basis
InterpolateSpot <- splines::interpSpline(
TimePeriod(HorizonTermStructure),
#difftime(as.Date(ForwardDate(HorizonTermStructure)[1:360]),
#         TradeDate(HorizonTermStructure))/30,
SpotRate(HorizonTermStructure)[1:360],
bSpline = TRUE)
InterpolateSpot <- splines::interpSpline(
TimePeriod(HorizonTermStructure)[1:360],
#difftime(as.Date(ForwardDate(HorizonTermStructure)[1:360]),
#         TradeDate(HorizonTermStructure))/30,
SpotRate(HorizonTermStructure)[1:360],
bSpline = TRUE)
SpotRates <- predict(
InterpolateSpot, TimePeriod(HorizonCashFlow)
months.in.year = 12
SpotRates <- predict(
InterpolateSpot, TimePeriod(HorizonCashFlow))
as.numeric(difftime(as.Date(
PmtDate(HorizonCashFlow)),
as.Date(TradeDate(HorizonTermStructure)))/30) / months.in.year
n.period = as.numeric(difftime(as.Date(
PmtDate(HorizonCashFlow)),
as.Date(TradeDate(HorizonTermStructure)))/30) / months.in.year
DiscountRate <-
(1+((SpotRates$y + horizon.spot.spread)/yield.basis))^ n.period
DiscountRate <- 1/DiscountRate
DiscountRate <-
(1+((SpotRates$y + horizon.spot.spread)/yield.basis))^ n.period
horizon.spot.spread <- ZeroVolSpread(CurveSpreads)
DiscountRate <-
(1+((SpotRates$y + horizon.spot.spread)/yield.basis))^ n.period
DiscountRate <- 1/DiscountRate
HorizonPresentValue <-
DiscountRate * TotalCashFlow(HorizonCashFlow)
PresentValue <- sum(HorizonPresentValue)
InterpolateCurve <- splines::interpSpline(as.numeric(rates.data[2,2:12]),
as.numeric(rates.data[1,2:12]),
bSpline = TRUE)
predict(InterpolateCurve, WAL(HorizonCashFlow))
predict(InterpolateCurve, WAL(HorizonCashFlow))$y
horizon.nominal.spread = 1.1
HorizonYield <-
predict(InterpolateCurve, WAL(HorizonCashFlow))$y + horizon.nominal.spread
HorizonYield <- rep(HorizonYield, NumberofCashFlow)
DiscountRate <- 1/((1 + (HorizonYield/monthly.yield.basis))^
(Period(HorizonTermStructure)[1:NumberofCashFlow]))
library(BondLab)
knitr::opts_chunk$set(cache=FALSE)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
APIKEY <- "31df8645e635484db99e5d1133ce9245"
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "dl")))
bond.id <- MBS(cusip = cusip)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
PassThrough <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# curve spreads are also returned in the mortgagescenario object
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
NoChangeScenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
HorizonReturn(NoChangeScenario)
ZeroVolSpread(NoChangeScenario)
SpreadToCurve(NoChangeScenario)
SpreadToBenchmark(NoChangeScenario)
BenchMark(NoChangeScenario)
WAL(PassThrough)
MyScenario <- function(bond.id = "character",
trade.date = "character",
settlement.date = "character",
prepayment = "character",
...,
price = NULL,
spread = NULL,
CPR = numeric()){
Price <- PriceTypes(price = price)
bond.id <- MBS(MBS.id = bond.id)
rates.data <- Rates(trade.date = trade.date)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "ns")))
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = prepayment,
CPR = CPR)
CashFlow <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
invisible(capture.output(
Scenario <- MortgageScenario(
bond.id = bond.id,
settlement.date = settlementdate,
rates.data = rates.data,
price = PriceDecimalString(Price),
original.bal = OriginalBal(bond.id),
scenario = "NCs",
horizon.months = 12,
method = "ns",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(CurveSpreads))))
return(Scenario)
}
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
build_vignettes('~/BondLab')
library(BondLab)
install.packages("roxygen2")
install.packages("termstrc")
install.packages("lubridate")
install.packages("optimx")
install.packages("RCurl")
install.packages("RSQLite")
install.packages("sql")
install.packages("sqldf")
install.packages("bizdays")
install.packages("xml")
install.packages("XML")
library(BondLab)
install.packages("testthat")
install.packages("rmarkdown")
library(BondLab)
require(RPostgreSQL)
require(ggplot2)
require(themes)
require(cowplot)
source('~/bondlab-treasury/USTDatabase.R')
dsn <- 'bondlab.cluster-cz3qydrtzs4z.us-east-1.rds.amazonaws.com'
drv <- DBI::dbDriver("PostgreSQL")
DBI::dbConnect(drv,
dbname = "bondlab",
user = 'bondlab',
password = 'es1IqIcY$',
host = dsn,
port = 5432)
conn <- get.treasury.database.connection()
sql <-
"with tenyear as (
select
cusip
from
treasury_securities
where
securitytermweekyear = '10-Year'
and
reopening = FALSE
and
auctiondate > '01-01-2013')
=======
from
loandata
join
trainloans
on
trainloans.loannum = loandata.loannum
join
loandatatable
on
loandatatable.loannum = loandata.loannum
join
sato
on
sato.loannum = loandatatable.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join
loanage
on
loanage.loannum = loandata.loannum
and
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
modeldata <- modeldata[complete.cases(modeldata),]
data = as.matrix(modeldata[, !(names(modeldata) %in% c('event'))])
data = Matrix(data, sparse = TRUE)
label = as.numeric(modeldata[, (names(modeldata) %in% c('event'))])
xgboost_model <- xgboost(data = data,
label = label,
nrounds = 10000,
eta = 0.1,
max.depth = 4,
min.child.weight = 1,
max.delta.step = 0,
subsample = 1,
nthread = 4,
objective = 'binary:logistic',
eval.metric = 'auc')
xgb.save(xgboost_model, 'xgboost_model')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/xgboost_model')
xgb.save(xgboost_model, '~\Documents\bondlabprepaymentmodel\xgboost_model')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel')
xgb.save(xgboost_model, '~Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, '~users/Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, 'Users/glennschultz/Documents/bondlabprepaymentmodel/')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/tba')
xgb.save(xgboost_model, 'tba')
xgb.save(xgboost_model, '~/Documents/tba')
xgb.save(xgboost_model, '~/Documents/')
xgb.save(xgboost_model, 'tba')
xgb.save(xgboost_model, '~/Documents/bondlabprepaymentmodel/tba')
View(xgboost_model)
saveRDS(xgboost_model, '~/Documents/bondlabprepaymentmodel/tba')
xgboost_model_test <- readRDS('~/Documents/bondlabprepaymentmodel/tba')
sql <-
"
with minage (loannum, period, age) as
(
select
loannum
,period
,age
from
(select loannum, period, age, rank() over (partition by loannum order by loannum asc, period asc) from
loandata) as rank
where rank = 1
),
loanage as
(
select * from loanage()
),
sato as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
origyear as
(
select
loannum
,date_part('year', period - age * cast('1 month' as interval)) as origyear
,period
,age
from minage
),
mtgrate as (select * from mtgrate())
select
loandata.period
,origyear
,cast(sum(currbal * loanage.loanage_1)/sum(currbal) as int) as age
--,cast(sum(currbal * loanage.loanage_2)/sum(currbal) as int) as age_2
--,cast(sum(currbal * loanage.loanage_3)/sum(currbal) as int) as age_3
,date_part('month', loandata.period) as month
,sum(currbal * (noterate - (mtgrate.mtgrate+sato)))/sum(currbal) as incentive
,sum(currbal * (noterate - (mtgrate.mtgrate_2+sato)))/sum(currbal) as incentive_2
,sum(currbal * (noterate - (mtgrate.mtgrate_3+sato)))/sum(currbal) as incentive_3
,sum(currbal * ultv)/sum(currbal) as mtmltv
,sum(currbal * (case when event = 2 then 1 else event end))/sum(currbal) as smm
from
loandata
join
origyear
on
origyear.loannum = loandata.loannum
join sato
on
sato.loannum = loandata.loannum
join
testloans
on
testloans.loannum = loandata.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join loanage
on
loanage.period = loandata.period
and
loanage.loannum = loandata.loannum
where loandata.age > 0
and
noterate - (mtgrate.mtgrate_3+sato) is not NULL
group by loandata.period, origyear
"
xgboost_model_test <- readRDS('~/Documents/bondlabprepaymentmodel/tba')
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
#create predicted dataset
drop <- c('period', 'origyear', 'smm')
preddata <- as.matrix(modeldata[ , !(names(modeldata) %in% drop)])
preddata <- Matrix(preddata, sparse = TRUE)
predicted <- predict(xgboost_model_test, newdata = preddata, type = 'response')
modeldata$predicted <- predicted
dbWriteTable(conn, 'modelresult', modeldata, row.names = FALSE, overwrite = TRUE)
sql <-
"
>>>>>>> acc93f2f9f12b74df2411bdc0b5697f9904e44e8
select
TSP.pricedate
,TSP.spreadzv
,TDS.status
from
<<<<<<< HEAD
treasury_special_prices TSP
=======
modelresult
"
sqlquery <- sqlInterpolate(ANSI(), sql)
plotdata <- dbGetQuery(conn, sqlquery)
plotdata <- gather(plotdata, variable, value, -period, -origyear)
ggplot(plotdata, aes(x = period, y = value, color = variable)) +
geom_line()+
theme_minimal()+
labs(y = 'CPR(%)',
x = 'Date') +
scale_x_date(date_breaks = '6 month', labels = date_format('%m-%Y'))+
scale_colour_tableau(palette = 'tableau10') +
theme(legend.title = element_blank(),
legend.position = 'right',
axis.text.x = element_text(angle = 90)) +
facet_wrap(~origyear, ncol = 2)
ggsave('~/Documents/bondlabprepaymentmodel/xgboostviz.pdf', height = 12, width = 8)
date <- as.Date('03-01-2018', format = '%m-%d-%Y')
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
date + days(55)
date + month(-1)
date + month(-1) + days(55)
date + month(-1)
date + month(-2)
date <- as.Date('02-01-2018', format = '%m-%d-%Y')
date + days(55)
library(BondLab)
PPC.Ramp(.002, .06, 30)
PPC.Ramp(.002, .06, 30, seq(1, 60, 1))
PPC.Ramp(.2, 6, 30, seq(1, 60, 1))
PPC.Ramp(begin.cpr = .2, end.cpr = 6, season.period = 30, period = seq(1, 60, 1))
library(BondLab)
NULL + 1
library(BondLab)
require(RPostgreSQL)
require(caret)
require(neuralnet)
require(ggplot2)
require(scales)
require(dplyr)
drv <- DBI::dbDriver("PostgreSQL")
conn <- DBI::dbConnect(drv,
dbname = 'FHLMC',
user = 'postgres',
password = 'Kodiak1961',
host = 'localhost',
port = 5433)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
sql <-
'
with sato(loannum, sato) as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
mtgrate as (
select * from mtgrate()
),
loanage as (
select * from loanage()
)
select
loanage.loanage_1 as age
--,loanage.loanage_2 as age_2
--,loanage.loanage_3 as age_3
,extract(month from loandata.period) as month
,loandata.noterate - (mtgrate.mtgrate + sato) as incentive
,loandata.noterate - (mtgrate.mtgrate_2 + sato) as incentive_2
,loandata.noterate - (mtgrate.mtgrate_3 + sato) as incentive_3
,loandata.ultv as mtmltv
,CASE when loandata.period = loandatatable.period then loandatatable.event else 0 end as event
from
loandata
>>>>>>> acc93f2f9f12b74df2411bdc0b5697f9904e44e8
join
tenyear
on
tenyear.cusip = TSP.cusip
join
treasury_daily_status TDS
on
TSP.pricedate = TDS.date
and
<<<<<<< HEAD
TSP.cusip = TDS.cusip"
sql <-
"
select
date
,round(yield_10year,4) as year10
from
bondlab_par_bond_curve
where
date >= '01-01-2013'
"
sqlquery <- sqlInterpolate(ANSI(), sql)
ZVspreads <- dbGetQuery(conn, sqlquery)
ZVspreads$BondStatus <- as.factor(ZVspreads$status)
ZVspreads$BondStatus <- factor(ZVspreads$BondStatus,
levels = c('otr', 'ftr1', 'ftr2', 'ftr3', 'ftr4', 'ftr5', 'ftr6'))
sql <-
"
select
date
,round(yield_10year,4) as year10
from
bondlab_par_bond_curve
where
date >= '01-01-2013'
"
sqlquery <- sqlInterpolate(ANSI(), sql)
yield10 <- dbGetQuery(conn, sqlquery)
ZVSpread <- ggplot(ZVspreads, aes(x = pricedate, y = spreadzv, color = BondStatus))+
theme_minimal() +
geom_point(alpha = .5) +
labs(x = 'ZV Spread',
y = 'Date',
title = '10-year OTR through FTR6 ZV Spread Analysis') +
scale_color_tableau(palette = 'tableau10') +
guides(colour = guide_legend(nrow = 1)) +
theme(legend.position = 'bottom')
Yield10 <- ggplot(yield10, aes(x = date, y = year10)) +
theme_minimal() +
geom_line(color = 'blue', lwd = 1) +
labs(x = 'Date',
y = 'Yield',
title = '10-year Yield History')
ggplot(ZVspreads, aes(x = spreadzv, fill = BondStatus)) +
geom_histogram() +
guides(colour = guide_legend(nrow = 1)) +
scale_fill_tableau(palette = 'tableau10') +
labs(title = '10-year ZV Spread Distibution by Stastus')+
theme(legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(~BondStatus)
ggsave('~/bondlab-treasury/zspread_dist.png', height = 4, width = 6)
plot_grid(ZVSpread, Yield10, nrow = 2)
ggsave('~/bondlab-treasury/zspread.png', height = 4, width = 6)
library(BondLab)
13^3
13*3 *3
13^3
3^3
10^3
library(BondLab)
182/26
26*7
library(BondLab)
3.4/.25
13 * .25
1.5-3.25
2.5/.25
2.4/.25
(2.4/.25) * .25
1.5 - 2.4
library(BondLab)
360/89
library(BondLab)
182/360
library(BondLab)
require(BondLab)
# Test the bonds in the data folders for Anthony's class The bonds that are
# available are detailed below and the term structure is 08-15-2016
# Treasury settlement date is 08-18-2016
# Mortgage settlement date 09-15-2016
# Call the UST bonds by cusip number
UST1125082021 <- Bond(cusip = "912828S76")
UST075072018 <- Bond(cusip = "912828S68")
UST150082026 <- Bond(cusip = "9128282A7")
UST225082046 <- Bond(cusip = "912810RT7")
price = "100-00"
principal = 1000
price <- tryCatch(PriceTypes(price = price)
,error = function(e) print(e)
,warning = function(w) print(w))
Curve <- Rates(trade.date = "05-19-2017")
invisible(capture.output(TermStructure <-
TermStructure(rates.data = Curve, method = "dl")))
CashFlow <- BondCashFlows(bond.id = UST150082026,
principal = principal,
settlement.date = "05-22-2017",
price = PriceDecimalString(price))
proceeds = principal * PriceBasis(price) + Accrued(CashFlow)
CurveSpreads <- CurveSpreads(rates.data = Curve,
CashFlow = CashFlow,
TermStructure = TermStructure,
proceeds = proceeds)
BondKeyRate <- BondTermStructure(bond.id = UST150082026,
Rate.Delta = .50,
TermStructure = TermStructure,
principal = 1000,
price = PriceDecimalString(price),
cashflow = CashFlow)
NCBondScenario <- BondScenario(bond.id = UST150082026,
settlement.date = "05-30-2017",
rates.data = Curve,
price = PriceDecimalString(price),
principal = principal,
scenario = "NC",
horizon.months = 12,
horizon.spot.spread = ZeroVolSpread(CurveSpreads))
Curve <- GetSwapCurve(CurveDate = '05-19-2017')
ptm <- proc.time()
invisible(capture.output(TermStructure <-
TermStructure(rates.data = Curve, method = "dl")))
proc.time() - ptm
# Call the mortgage pass-thorughs by cusip number
G01721 <- MBS(cusip = "31283HY40")
G01722 <- MBS(cusip = "31283HY41")
G01723 <- MBS(cusip = "31283HY42")
prepayment <- PrepaymentModel(bond.id = G01721,
TermStructure = TermStructure(
rates.data = Curve, method = "dl"),
MortgageRate = MtgRate(),
ModelTune = ModelTune(MBS(cusip = "31283HY40")),
Burnout = Burnout(MBS(cusip = "31283HY40")),
PrepaymentAssumption = "MODEL")
SpreadToPrice <- SpreadToPriceMBS(bond.id = G01721,
trade.date = "05-19-2017",
settlement.date = "6-22-2017",
PrepaymentAssumption = "CPR",
spread = "65",
CPR = 8.5)
G01721CF <- tryCatch(
MortgageCashFlow(bond.id = G01721,
original.bal = 1000000,
settlement.date = "06-22-2017",
price = PriceDecimalString(SpreadToPrice),
PrepaymentAssumption =
PrepaymentModel(
bond.id = G01721,
TermStructure = TermStructure(
rates.data = Curve, method = "dl"),
MortgageRate = MtgRate(),
ModelTune = ModelTune(MBS(cusip = "31283HY40")),
Burnout = Burnout(MBS(cusip = "31283HY40")),
PrepaymentAssumption = "MODEL"))
,error = function(e) print(e)
,warning = function(w) print(w)
,message = function(m) print(m))
Spreads <- CurveSpreads(rates.data = Curve,
CashFlow = G01721CF,
TermStructure = TermStructure,
proceeds = (PriceBasis(SpreadToPrice) *
1000000 *
MBSFactor(G01721)) + Accrued(G01721CF))
NCScenario <- MortgageScenario(bond.id = G01721,
settlement.date = "05-19-2017",
rates.data = Curve,
price = PriceDecimalString(SpreadToPrice),
original.bal = OriginalBal(G01721),
scenario = "NCs",
horizon.months = 6,
method = "dl",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(Spreads))
keyrate <- MtgTermStructure(bond.id = G01721,
original.bal = OriginalBal(G01721),
TermStructure = TermStructure,
settlement.date = "05-19-2017",
principal = OriginalBal(G01721) * MBSFactor(G01721),
price = PriceDecimalString(SpreadToPrice),
cashflow = G01721CF)
.01^2
244 * .01^2
244/100
library(BondLab)
52 * 8000
quantile(x = c(86, 608), type = 9)
rank(x = c(86, 608))
608-86
475/608-86
475/86-86
475/86-608
475/(608-86)
450/(608-86)
425/(608-86)
475
library(BondLab)
exp(1.03 * -1)
exp(1.03 * -2)
library(BondLab)
exp(1.03 * -2)
exp(1.03 * -.5)
exp(1.2 * -2)
exp(1.2 * -3)
1.03^3
library(BondLab)
?Classes
library(BondLab)
install.packages("RSQLite")
install.packages("sqldf")
install.packages("bizdays")
=======
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
#modeldata <- transdata[ , !(names(transdata) %in% 'loannum')]
#function to fit the logistic model and return a smaller size model object
neuralnet_model <- neuralnet(event ~
age +
cos(month) +
sin(month) +
incentive +
incentive_2 +
incentive_3,
data = modeldata,
hidden = 3,
learningrate = .1,
err.fct = 'sse',
act.fct = 'logistic')
modeldata <- modeldata[complete.cases(modeldata),]
neuralnet_model <- neuralnet(event ~
age +
cos(month) +
sin(month) +
incentive +
incentive_2 +
incentive_3,
data = modeldata,
hidden = 3,
learningrate = .1,
err.fct = 'sse',
act.fct = 'logistic')
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
require(RPostgreSQL)
require(caret)
required(sampling)
require(RPostgreSQL)
require(caret)
require(sampling)
require(neuralnet)
require(ggplot2)
require(scales)
require(dplyr)
drv <- DBI::dbDriver("PostgreSQL")
conn <- DBI::dbConnect(drv,
dbname = 'FHLMC',
user = 'postgres',
password = 'Kodiak1961',
host = 'localhost',
port = 5433)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
require(RPostgreSQL)
require(caret)
require(BalancedSampling)
require(neuralnet)
require(ggplot2)
require(scales)
require(dplyr)
drv <- DBI::dbDriver("PostgreSQL")
conn <- DBI::dbConnect(drv,
dbname = 'FHLMC',
user = 'postgres',
password = 'Kodiak1961',
host = 'localhost',
port = 5433)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
sample <- landingphase(prob, probflight, auxvariables)
train <- as.data.frame(loandatatable[sample==1,1], stringsAsFactors = FALSE)
colnames(train) <- c('loannum')
test <- as.data.frame(loandatatable[sample ==0,1], stringsAsFactors = FALSE)
colnames(test) <- c('loannum')
dbWriteTable(conn, 'trainloans', train, row.names = FALSE, overwrite = TRUE)
dbWriteTable(conn, 'testloans', test, row.names = FALSE, overwrite = TRUE)
sql <-
'
with sato(loannum, sato) as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
mtgrate as (
select * from mtgrate()
),
loanage as (
select * from loanage()
)
select
loanage.loanage_1 as age
--,loanage.loanage_2 as age_2
--,loanage.loanage_3 as age_3
,extract(month from loandata.period) as month
,loandata.noterate - (mtgrate.mtgrate + sato) as incentive
,loandata.noterate - (mtgrate.mtgrate_2 + sato) as incentive_2
,loandata.noterate - (mtgrate.mtgrate_3 + sato) as incentive_3
,loandata.ultv as mtmltv
,CASE when loandata.period = loandatatable.period then loandatatable.event else 0 end as event
from
loandata
join
trainloans
on
trainloans.loannum = loandata.loannum
join
loandatatable
on
loandatatable.loannum = loandata.loannum
join
sato
on
sato.loannum = loandatatable.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join
loanage
on
loanage.loannum = loandata.loannum
and
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
modeldata <- modeldata[complete.cases(modeldata),]
#function to fit the logistic model and return a smaller size model object
neuralnet_model <- neuralnet(event ~
age +
cos(month) +
sin(month) +
incentive +
incentive_2 +
incentive_3,
data = modeldata,
hidden = 3,
learningrate = .1,
err.fct = 'sse',
act.fct = 'logistic')
>>>>>>> acc93f2f9f12b74df2411bdc0b5697f9904e44e8
library(BondLab)
