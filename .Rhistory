numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
sql <-
'
with sato(loannum, sato) as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
mtgrate as (
select * from mtgrate()
),
loanage as (
select * from loanage()
)
select
loanage.loanage_1 as age
--,loanage.loanage_2 as age_2
--,loanage.loanage_3 as age_3
,extract(month from loandata.period) as month
,loandata.noterate - (mtgrate.mtgrate + sato) as incentive
,loandata.noterate - (mtgrate.mtgrate_2 + sato) as incentive_2
,loandata.noterate - (mtgrate.mtgrate_3 + sato) as incentive_3
,loandata.ultv as mtmltv
,CASE when loandata.period = loandatatable.period then loandatatable.event else 0 end as event
from
loandata
>>>>>>> acc93f2f9f12b74df2411bdc0b5697f9904e44e8
join
tenyear
on
tenyear.cusip = TSP.cusip
join
treasury_daily_status TDS
on
TSP.pricedate = TDS.date
and
<<<<<<< HEAD
TSP.cusip = TDS.cusip"
sql <-
"
select
date
,round(yield_10year,4) as year10
from
bondlab_par_bond_curve
where
date >= '01-01-2013'
"
sqlquery <- sqlInterpolate(ANSI(), sql)
ZVspreads <- dbGetQuery(conn, sqlquery)
ZVspreads$BondStatus <- as.factor(ZVspreads$status)
ZVspreads$BondStatus <- factor(ZVspreads$BondStatus,
levels = c('otr', 'ftr1', 'ftr2', 'ftr3', 'ftr4', 'ftr5', 'ftr6'))
sql <-
"
select
date
,round(yield_10year,4) as year10
from
bondlab_par_bond_curve
where
date >= '01-01-2013'
"
sqlquery <- sqlInterpolate(ANSI(), sql)
yield10 <- dbGetQuery(conn, sqlquery)
ZVSpread <- ggplot(ZVspreads, aes(x = pricedate, y = spreadzv, color = BondStatus))+
theme_minimal() +
geom_point(alpha = .5) +
labs(x = 'ZV Spread',
y = 'Date',
title = '10-year OTR through FTR6 ZV Spread Analysis') +
scale_color_tableau(palette = 'tableau10') +
guides(colour = guide_legend(nrow = 1)) +
theme(legend.position = 'bottom')
Yield10 <- ggplot(yield10, aes(x = date, y = year10)) +
theme_minimal() +
geom_line(color = 'blue', lwd = 1) +
labs(x = 'Date',
y = 'Yield',
title = '10-year Yield History')
ggplot(ZVspreads, aes(x = spreadzv, fill = BondStatus)) +
geom_histogram() +
guides(colour = guide_legend(nrow = 1)) +
scale_fill_tableau(palette = 'tableau10') +
labs(title = '10-year ZV Spread Distibution by Stastus')+
theme(legend.position = 'bottom',
axis.text.x = element_text(angle = 90, hjust = 1)) +
facet_grid(~BondStatus)
ggsave('~/bondlab-treasury/zspread_dist.png', height = 4, width = 6)
plot_grid(ZVSpread, Yield10, nrow = 2)
ggsave('~/bondlab-treasury/zspread.png', height = 4, width = 6)
library(BondLab)
13^3
13*3 *3
13^3
3^3
10^3
library(BondLab)
182/26
26*7
library(BondLab)
3.4/.25
13 * .25
1.5-3.25
2.5/.25
2.4/.25
(2.4/.25) * .25
1.5 - 2.4
library(BondLab)
360/89
library(BondLab)
182/360
library(BondLab)
require(BondLab)
# Test the bonds in the data folders for Anthony's class The bonds that are
# available are detailed below and the term structure is 08-15-2016
# Treasury settlement date is 08-18-2016
# Mortgage settlement date 09-15-2016
# Call the UST bonds by cusip number
UST1125082021 <- Bond(cusip = "912828S76")
UST075072018 <- Bond(cusip = "912828S68")
UST150082026 <- Bond(cusip = "9128282A7")
UST225082046 <- Bond(cusip = "912810RT7")
price = "100-00"
principal = 1000
price <- tryCatch(PriceTypes(price = price)
,error = function(e) print(e)
,warning = function(w) print(w))
Curve <- Rates(trade.date = "05-19-2017")
invisible(capture.output(TermStructure <-
TermStructure(rates.data = Curve, method = "dl")))
CashFlow <- BondCashFlows(bond.id = UST150082026,
principal = principal,
settlement.date = "05-22-2017",
price = PriceDecimalString(price))
proceeds = principal * PriceBasis(price) + Accrued(CashFlow)
CurveSpreads <- CurveSpreads(rates.data = Curve,
CashFlow = CashFlow,
TermStructure = TermStructure,
proceeds = proceeds)
BondKeyRate <- BondTermStructure(bond.id = UST150082026,
Rate.Delta = .50,
TermStructure = TermStructure,
principal = 1000,
price = PriceDecimalString(price),
cashflow = CashFlow)
NCBondScenario <- BondScenario(bond.id = UST150082026,
settlement.date = "05-30-2017",
rates.data = Curve,
price = PriceDecimalString(price),
principal = principal,
scenario = "NC",
horizon.months = 12,
horizon.spot.spread = ZeroVolSpread(CurveSpreads))
Curve <- GetSwapCurve(CurveDate = '05-19-2017')
ptm <- proc.time()
invisible(capture.output(TermStructure <-
TermStructure(rates.data = Curve, method = "dl")))
proc.time() - ptm
# Call the mortgage pass-thorughs by cusip number
G01721 <- MBS(cusip = "31283HY40")
G01722 <- MBS(cusip = "31283HY41")
G01723 <- MBS(cusip = "31283HY42")
prepayment <- PrepaymentModel(bond.id = G01721,
TermStructure = TermStructure(
rates.data = Curve, method = "dl"),
MortgageRate = MtgRate(),
ModelTune = ModelTune(MBS(cusip = "31283HY40")),
Burnout = Burnout(MBS(cusip = "31283HY40")),
PrepaymentAssumption = "MODEL")
SpreadToPrice <- SpreadToPriceMBS(bond.id = G01721,
trade.date = "05-19-2017",
settlement.date = "6-22-2017",
PrepaymentAssumption = "CPR",
spread = "65",
CPR = 8.5)
G01721CF <- tryCatch(
MortgageCashFlow(bond.id = G01721,
original.bal = 1000000,
settlement.date = "06-22-2017",
price = PriceDecimalString(SpreadToPrice),
PrepaymentAssumption =
PrepaymentModel(
bond.id = G01721,
TermStructure = TermStructure(
rates.data = Curve, method = "dl"),
MortgageRate = MtgRate(),
ModelTune = ModelTune(MBS(cusip = "31283HY40")),
Burnout = Burnout(MBS(cusip = "31283HY40")),
PrepaymentAssumption = "MODEL"))
,error = function(e) print(e)
,warning = function(w) print(w)
,message = function(m) print(m))
Spreads <- CurveSpreads(rates.data = Curve,
CashFlow = G01721CF,
TermStructure = TermStructure,
proceeds = (PriceBasis(SpreadToPrice) *
1000000 *
MBSFactor(G01721)) + Accrued(G01721CF))
NCScenario <- MortgageScenario(bond.id = G01721,
settlement.date = "05-19-2017",
rates.data = Curve,
price = PriceDecimalString(SpreadToPrice),
original.bal = OriginalBal(G01721),
scenario = "NCs",
horizon.months = 6,
method = "dl",
prepayment = "MODEL",
horizon.spot.spread = ZeroVolSpread(Spreads))
keyrate <- MtgTermStructure(bond.id = G01721,
original.bal = OriginalBal(G01721),
TermStructure = TermStructure,
settlement.date = "05-19-2017",
principal = OriginalBal(G01721) * MBSFactor(G01721),
price = PriceDecimalString(SpreadToPrice),
cashflow = G01721CF)
.01^2
244 * .01^2
244/100
library(BondLab)
52 * 8000
quantile(x = c(86, 608), type = 9)
rank(x = c(86, 608))
608-86
475/608-86
475/86-86
475/86-608
475/(608-86)
450/(608-86)
425/(608-86)
475
library(BondLab)
exp(1.03 * -1)
exp(1.03 * -2)
library(BondLab)
exp(1.03 * -2)
exp(1.03 * -.5)
exp(1.2 * -2)
exp(1.2 * -3)
1.03^3
library(BondLab)
?Classes
library(BondLab)
install.packages("RSQLite")
install.packages("sqldf")
install.packages("bizdays")
=======
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
#modeldata <- transdata[ , !(names(transdata) %in% 'loannum')]
#function to fit the logistic model and return a smaller size model object
neuralnet_model <- neuralnet(event ~
age +
cos(month) +
sin(month) +
incentive +
incentive_2 +
incentive_3,
data = modeldata,
hidden = 3,
learningrate = .1,
err.fct = 'sse',
act.fct = 'logistic')
modeldata <- modeldata[complete.cases(modeldata),]
neuralnet_model <- neuralnet(event ~
age +
cos(month) +
sin(month) +
incentive +
incentive_2 +
incentive_3,
data = modeldata,
hidden = 3,
learningrate = .1,
err.fct = 'sse',
act.fct = 'logistic')
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
require(RPostgreSQL)
require(caret)
required(sampling)
require(RPostgreSQL)
require(caret)
require(sampling)
require(neuralnet)
require(ggplot2)
require(scales)
require(dplyr)
drv <- DBI::dbDriver("PostgreSQL")
conn <- DBI::dbConnect(drv,
dbname = 'FHLMC',
user = 'postgres',
password = 'Kodiak1961',
host = 'localhost',
port = 5433)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
require(RPostgreSQL)
require(caret)
require(BalancedSampling)
require(neuralnet)
require(ggplot2)
require(scales)
require(dplyr)
drv <- DBI::dbDriver("PostgreSQL")
conn <- DBI::dbConnect(drv,
dbname = 'FHLMC',
user = 'postgres',
password = 'Kodiak1961',
host = 'localhost',
port = 5433)
sql <-
"
with sector(loannum, sector) as
(
select distinct(loannum), sector from sector('llb')
)
select
loandatatable.*
from
loandatatable
join
sector on sector.loannum = loandatatable.loannum
"
sqlquery <- sqlInterpolate(ANSI(), sql)
loandatatable <- dbGetQuery(conn, sqlquery)
# sample the loan data table for test and train loans.  To sample first convert
# characters to factors.  This is needed to pull a balanced sample from the dataset
numcols <- ncol(loandatatable)
for(factor in 3:numcols){
if(typeof(loandatatable[,factor]) == 'character'){
loandatatable[,factor] <- as.factor(loandatatable[,factor])}
}
numloans <- as.numeric(nrow(loandatatable))
samplesize <- ceiling(nrow(loandatatable) * .40)
prob = rep(samplesize/numloans, numloans)
auxvariables <- cbind(prob, loandatatable$age, loandatatable$purpose, loandatatable$propertytype,
loandatatable$occupancy, loandatatable$channel, loandatatable$state,
loandatatable$age, loandatatable$event)
probflight <- flightphase(prob, cbind(prob,auxvariables))
sample <- landingphase(prob, probflight, auxvariables)
train <- as.data.frame(loandatatable[sample==1,1], stringsAsFactors = FALSE)
colnames(train) <- c('loannum')
test <- as.data.frame(loandatatable[sample ==0,1], stringsAsFactors = FALSE)
colnames(test) <- c('loannum')
dbWriteTable(conn, 'trainloans', train, row.names = FALSE, overwrite = TRUE)
dbWriteTable(conn, 'testloans', test, row.names = FALSE, overwrite = TRUE)
sql <-
'
with sato(loannum, sato) as
(
select
loannum
,sato
from (select
loannum
,noterate - mtgrate as sato
,rank() over (partition by loannum order by loannum asc, period asc) from loandata) as rank
where rank = 1
),
mtgrate as (
select * from mtgrate()
),
loanage as (
select * from loanage()
)
select
loanage.loanage_1 as age
--,loanage.loanage_2 as age_2
--,loanage.loanage_3 as age_3
,extract(month from loandata.period) as month
,loandata.noterate - (mtgrate.mtgrate + sato) as incentive
,loandata.noterate - (mtgrate.mtgrate_2 + sato) as incentive_2
,loandata.noterate - (mtgrate.mtgrate_3 + sato) as incentive_3
,loandata.ultv as mtmltv
,CASE when loandata.period = loandatatable.period then loandatatable.event else 0 end as event
from
loandata
join
trainloans
on
trainloans.loannum = loandata.loannum
join
loandatatable
on
loandatatable.loannum = loandata.loannum
join
sato
on
sato.loannum = loandatatable.loannum
join
mtgrate
on
mtgrate.period = loandata.period
join
loanage
on
loanage.loannum = loandata.loannum
and
loanage.period = loandata.period
order by loandata.loannum desc, loandata.period asc
'
sqlquery <- sqlInterpolate(ANSI(), sql)
modeldata <- dbGetQuery(conn, sqlquery)
modeldata <- modeldata[complete.cases(modeldata),]
#function to fit the logistic model and return a smaller size model object
neuralnet_model <- neuralnet(event ~
age +
cos(month) +
sin(month) +
incentive +
incentive_2 +
incentive_3,
data = modeldata,
hidden = 3,
learningrate = .1,
err.fct = 'sse',
act.fct = 'logistic')
>>>>>>> acc93f2f9f12b74df2411bdc0b5697f9904e44e8
library(BondLab)
install.packages("roxygen2")
install.packages("~/termstruc/termstrc_1.3.7.tar.gz", repos = NULL, type = "source")
install.packages("lmtest")
install.packages("rgl")
install.packages("sandwhich")
install.packages("urca")
install.packages("zoo")
install.packages("~/termstruc/termstrc_1.3.7.tar.gz", repos = NULL, type = "source")
install.packages("sandwich")
install.packages("~/termstruc/termstrc_1.3.7.tar.gz", repos = NULL, type = "source")
install.packages("Rcpp")
install.packages("~/termstruc/termstrc_1.3.7.tar.gz", repos = NULL, type = "source")
install.packages("roxygen2")
install.packages("RSQLite")
install.packages("optimx")
install.packages("sqldf")
install.packages("bizdays")
library(BondLab)
