NextPmtDate = as.character(as.Date(PmtDates[2]), format = '%m-%d-%Y'),
Moody = 'Aaa',
SP = 'AAA',
BondLab = 'AAA',
Frequency = if(USTData[1,bonddata] <= 1) {floor(1/USTData[2,bonddata])
} else {2},
BondBasis = 'Actual365',
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE
)
CashFlow <- CashFlowBond(bond.id = Bond,
principal = OfferAmount(Bond),
settlement.date = SettlementDate)
View(CashFlow)
View(USTData)
bonddata = 4
View(USTData)
bonddata = 5
num.months = ceiling(USTData[2,bonddata] * 12)
MaturityDate = as.character(as.Date(USTData[1,1]) %m+% months(num.months), format = '%m-%d-%Y')
SettlementDate = as.character(add.bizdays(USTData[1,1], 2, cal), format = '%m-%d-%Y')
IssueDate =as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
DatedDate = as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
Coupon = if(USTData[2,bonddata] <= 1){0.00} else {USTData[1,bonddata]}
Price = if(USTData[2,bonddata] <= 1) {BillPrice(
100, USTData[1,bonddata]/100,
floor(USTData[2,bonddata] * 364))} else {100}
if(USTData[2,bonddata] <= 1){PmtDates = c(as.Date(IssueDate, format = '%m-%d-%Y'),
as.Date(MaturityDate, format = '%m-%d-%Y'))} else {
PmtDates = LastandNextPmtDate(
issue.date = IssueDate,
dated.date = DatedDate,
maturity.date = MaturityDate,
settlement.date = SettlementDate,
bond.basis = 'Actual365',
frequency = 2)}
ISIN = gsub("[[:punct:]]", "", paste0('UST',Coupon,
format(as.Date(MaturityDate,
format = '%m-%d-%Y'),
format ='%m%-%Y')))
Bond <- BondDetails(
Cusip = ISIN,
ID = colnames(USTData[1]),
BondType = if(USTData[1,1] <=1) {'Bill'} else {'Bond'},
Sector = 'UST',
Issuer = 'US Govt',
Underwriter = 'US Govt',
OfferAmount = 100,
Coupon = Coupon,
IssueDate = IssueDate,
DatedDate = DatedDate,
Maturity = MaturityDate,
LastPmtDate = as.character(as.Date(PmtDates[1]), format = '%m-%d-%Y'),
NextPmtDate = as.character(as.Date(PmtDates[2]), format = '%m-%d-%Y'),
Moody = 'Aaa',
SP = 'AAA',
BondLab = 'AAA',
Frequency = if(USTData[1,bonddata] <= 1) {floor(1/USTData[2,bonddata])
} else {2},
BondBasis = 'Actual365',
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE
)
CashFlow <- CashFlowBond(bond.id = Bond,
principal = OfferAmount(Bond),
settlement.date = SettlementDate)
View(USTData)
View(CashFlow)
1/1
if(USTData[1,bonddata] <= 1) {floor(1/USTData[2,bonddata])
} else {2}
num.months = ceiling(USTData[2,bonddata] * 12)
MaturityDate = as.character(as.Date(USTData[1,1]) %m+% months(num.months), format = '%m-%d-%Y')
SettlementDate = as.character(add.bizdays(USTData[1,1], 2, cal), format = '%m-%d-%Y')
IssueDate =as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
DatedDate = as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
Coupon = if(USTData[2,bonddata] <= 1){0.00} else {USTData[1,bonddata]}
Price = if(USTData[2,bonddata] <= 1) {BillPrice(
100, USTData[1,bonddata]/100,
floor(USTData[2,bonddata] * 364))} else {100}
if(USTData[2,bonddata] <= 1){PmtDates = c(as.Date(IssueDate, format = '%m-%d-%Y'),
as.Date(MaturityDate, format = '%m-%d-%Y'))} else {
PmtDates = LastandNextPmtDate(
issue.date = IssueDate,
dated.date = DatedDate,
maturity.date = MaturityDate,
settlement.date = SettlementDate,
bond.basis = 'Actual365',
frequency = 2)}
ISIN = gsub("[[:punct:]]", "", paste0('UST',Coupon,
format(as.Date(MaturityDate,
format = '%m-%d-%Y'),
format ='%m%-%Y')))
Bond <- BondDetails(
Cusip = ISIN,
ID = colnames(USTData[1]),
BondType = if(USTData[1,1] <=1) {'Bill'} else {'Bond'},
Sector = 'UST',
Issuer = 'US Govt',
Underwriter = 'US Govt',
OfferAmount = 100,
Coupon = Coupon,
IssueDate = IssueDate,
DatedDate = DatedDate,
Maturity = MaturityDate,
LastPmtDate = as.character(as.Date(PmtDates[1]), format = '%m-%d-%Y'),
NextPmtDate = as.character(as.Date(PmtDates[2]), format = '%m-%d-%Y'),
Moody = 'Aaa',
SP = 'AAA',
BondLab = 'AAA',
Frequency = if(USTData[2,bonddata] <= 1) {floor(1/USTData[2,bonddata])
} else {2},
BondBasis = 'Actual365',
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE
)
CashFlow <- CashFlowBond(bond.id = Bond,
principal = OfferAmount(Bond),
settlement.date = SettlementDate)
View(CashFlow)
knitr::opts_chunk$set(cache=FALSE)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
APIKEY <- "31df8645e635484db99e5d1133ce9245"
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "dl")))
colnames(USTData) <- c('Date',
'Bill1M',
'Bill3M',
'Bill6M',
'Bill1',
'Note2',
'Note3',
'Note5',
'Note7',
'Note10',
'Note20',
'Bond30')
USTData[1,1] <- as.character(as.Date(
as.character(rates.data[1,1]), format = '%Y-%m-%d'))
USTData[1,2] <- rates.data[1,2] #1 month bill rate
USTData[1,3] <- rates.data[1,3] #3 month bill rate
USTData[1,4] <- rates.data[1,4] #6 month bill rate
USTData[1,5] <- rates.data[1,5] #12 month libor rate
USTData[1,6] <- rates.data[1,6]  #2 year note rate
USTData[1,7] <- rates.data[1,7]  #3 year note rate
USTData[1,8] <- rates.data[1,8]  #5 year note rate
USTData[1,9] <- rates.data[1,9]  #7 year note rate
USTData[1,10] <- rates.data[1,10] #10 year note rate
USTData[1,11] <- rates.data[1,11] #20 year bond rate
USTData[1,12] <- rates.data[1,12] #30 year bond rate
USTData[2,2] <- .0833
USTData[2,3] <- .25
USTData[2,4] <- .50
USTData[2,5] <- 1
USTData[2,6] <- 2
USTData[2,7] <- 3
USTData[2,8] <- 5
USTData[2,9] <- 7
USTData[2,10] <- 10
USTData[2,11] <- 20
USTData[2,12] <- 30
treasurybonds <- list(ISIN = NULL,
MATURITYDATE = NULL,
ISSUDATE = NULL,
COUPONRATE = NULL,
PRICE = NULL,
ACCRUED = NULL,
CASHFLOWS = list(ISIN = NULL, CF = NULL, DATE = NULL),
TODAY = NULL)
for(bonddata in 2:(length(USTData))){
num.months = ceiling(USTData[2,bonddata] * 12)
MaturityDate = as.character(as.Date(USTData[1,1]) %m+% months(num.months), format = '%m-%d-%Y')
SettlementDate = as.character(add.bizdays(USTData[1,1], 2, cal), format = '%m-%d-%Y')
IssueDate =as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
DatedDate = as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
Coupon = if(USTData[2,bonddata] <= 1){0.00} else {USTData[1,bonddata]}
Price = if(USTData[2,bonddata] <= 1) {BillPrice(
100, USTData[1,bonddata]/100,
floor(USTData[2,bonddata] * 364))} else {100}
if(USTData[2,bonddata] <= 1){PmtDates = c(as.Date(IssueDate, format = '%m-%d-%Y'),
as.Date(MaturityDate, format = '%m-%d-%Y'))} else {
PmtDates = LastandNextPmtDate(
issue.date = IssueDate,
dated.date = DatedDate,
maturity.date = MaturityDate,
settlement.date = SettlementDate,
bond.basis = 'Actual365',
frequency = 2)}
ISIN = gsub("[[:punct:]]", "", paste0('UST',Coupon,
format(as.Date(MaturityDate,
format = '%m-%d-%Y'),
format ='%m%-%Y')))
Bond <- BondDetails(
Cusip = ISIN,
ID = colnames(USTData[1]),
BondType = if(USTData[1,1] <=1) {'Bill'} else {'Bond'},
Sector = 'UST',
Issuer = 'US Govt',
Underwriter = 'US Govt',
OfferAmount = 100,
Coupon = Coupon,
IssueDate = IssueDate,
DatedDate = DatedDate,
Maturity = MaturityDate,
LastPmtDate = as.character(as.Date(PmtDates[1]), format = '%m-%d-%Y'),
NextPmtDate = as.character(as.Date(PmtDates[2]), format = '%m-%d-%Y'),
Moody = 'Aaa',
SP = 'AAA',
BondLab = 'AAA',
Frequency = if(USTData[2,bonddata] <= 1) {floor(1/USTData[2,bonddata])
} else {2},
BondBasis = 'Actual365',
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE
)
CashFlow <- CashFlowBond(bond.id = Bond,
principal = OfferAmount(Bond),
settlement.date = SettlementDate)
treasurybonds$ISIN = append(treasurybonds$ISIN, Cusip(Bond))
treasurybonds$MATURITYDATE = append(treasurybonds$MATURITYDATE, Maturity(Bond))
treasurybonds$ISSUDATE = append(treasurybonds$ISSUDATE, IssueDate(Bond))
treasurybonds$COUPONRATE = append(treasurybonds$COUPONRATE, Coupon(Bond))
treasurybonds$PRICE = append(treasurybonds$PRICE, Price)
treasurybonds$ACCRUED = append(treasurybonds$ACCRUED,0)
treasurybonds$CASHFLOWS$ISIN = append(treasurybonds$CASHFLOWS$ISIN,
rep(Cusip(Bond), length(CashFlow[,'TotalCashFlow'])))
treasurybonds$CASHFLOWS$CF = append(treasurybonds$CASHFLOWS$CF,
unname(CashFlow[,'TotalCashFlow']))
treasurybonds$CASHFLOWS$DATE = append(treasurybonds$CASHFLOWS$DATE,
unname(as.Date(CashFlow[,'Date'], origin = '1970-01-01')))
treasurybonds$TODAY = USTData[1,1]
}
CurveData$treasurybonds <- treasurybonds
class(CurveData) <- 'couponbonds'
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("bizdays", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
for(bonddata in 2:(length(USTData))){
num.months = ceiling(USTData[2,bonddata] * 12)
MaturityDate = as.character(as.Date(USTData[1,1]) %m+% months(num.months), format = '%m-%d-%Y')
SettlementDate = as.character(add.bizdays(USTData[1,1], 2, cal), format = '%m-%d-%Y')
IssueDate =as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
DatedDate = as.character(as.Date(USTData[1,1]), format = '%m-%d-%Y')
Coupon = if(USTData[2,bonddata] <= 1){0.00} else {USTData[1,bonddata]}
Price = if(USTData[2,bonddata] <= 1) {BillPrice(
100, USTData[1,bonddata]/100,
floor(USTData[2,bonddata] * 364))} else {100}
if(USTData[2,bonddata] <= 1){PmtDates = c(as.Date(IssueDate, format = '%m-%d-%Y'),
as.Date(MaturityDate, format = '%m-%d-%Y'))} else {
PmtDates = LastandNextPmtDate(
issue.date = IssueDate,
dated.date = DatedDate,
maturity.date = MaturityDate,
settlement.date = SettlementDate,
bond.basis = 'Actual365',
frequency = 2)}
ISIN = gsub("[[:punct:]]", "", paste0('UST',Coupon,
format(as.Date(MaturityDate,
format = '%m-%d-%Y'),
format ='%m%-%Y')))
Bond <- BondDetails(
Cusip = ISIN,
ID = colnames(USTData[1]),
BondType = if(USTData[1,1] <=1) {'Bill'} else {'Bond'},
Sector = 'UST',
Issuer = 'US Govt',
Underwriter = 'US Govt',
OfferAmount = 100,
Coupon = Coupon,
IssueDate = IssueDate,
DatedDate = DatedDate,
Maturity = MaturityDate,
LastPmtDate = as.character(as.Date(PmtDates[1]), format = '%m-%d-%Y'),
NextPmtDate = as.character(as.Date(PmtDates[2]), format = '%m-%d-%Y'),
Moody = 'Aaa',
SP = 'AAA',
BondLab = 'AAA',
Frequency = if(USTData[2,bonddata] <= 1) {floor(1/USTData[2,bonddata])
} else {2},
BondBasis = 'Actual365',
Callable = FALSE,
Putable = FALSE,
SinkingFund = FALSE
)
CashFlow <- CashFlowBond(bond.id = Bond,
principal = OfferAmount(Bond),
settlement.date = SettlementDate)
treasurybonds$ISIN = append(treasurybonds$ISIN, Cusip(Bond))
treasurybonds$MATURITYDATE = append(treasurybonds$MATURITYDATE, Maturity(Bond))
treasurybonds$ISSUDATE = append(treasurybonds$ISSUDATE, IssueDate(Bond))
treasurybonds$COUPONRATE = append(treasurybonds$COUPONRATE, Coupon(Bond))
treasurybonds$PRICE = append(treasurybonds$PRICE, Price)
treasurybonds$ACCRUED = append(treasurybonds$ACCRUED,0)
treasurybonds$CASHFLOWS$ISIN = append(treasurybonds$CASHFLOWS$ISIN,
rep(Cusip(Bond), length(CashFlow[,'TotalCashFlow'])))
treasurybonds$CASHFLOWS$CF = append(treasurybonds$CASHFLOWS$CF,
unname(CashFlow[,'TotalCashFlow']))
treasurybonds$CASHFLOWS$DATE = append(treasurybonds$CASHFLOWS$DATE,
unname(as.Date(CashFlow[,'Date'], origin = '1970-01-01')))
treasurybonds$TODAY = USTData[1,1]
}
CurveData$treasurybonds <- treasurybonds
class(CurveData) <- 'couponbonds'
create_cashflows_matrix(treasurybonds)
create_maturities_matrix(treasurybonds)
if(method != "cs") {TSFit <- estim_nss(dataset = CurveData,
group = 'treasurybonds',
matrange = "all", method = method)
} else {TSFit <- estim_cs(bonddata = CurveData,
group = 'treasurybonds',
matrange = "all", rse = TRUE)}
if(method != "cs") {TSFit <- estim_nss(dataset = CurveData,
group = 'treasurybonds',
matrange = "all",
method = method)
} else {TSFit <- estim_cs(bonddata = CurveData,
group = 'treasurybonds',
matrange = "all",
rse = TRUE)}
TSFit
TSFit$opt_result
Vector <- switch(method,
ns = unname(TSFit$opt_result[[1]]$par[c("beta0",
"beta1",
"beta2",
"tau1")]),
dl = unname(TSFit$opt_result[[1]]$par[c("beta0",
"beta1",
"beta2")]),
sv = unname(TSFit$opt_result[[1]]$par[c("beta0",
"beta1",
"beta2",
"tau1",
"beta3",
"tau2")]),
asv = unname(TSFit$opt_result[[1]]$par[c("beta0",
"beta1",
"beta2",
"tau1",
"beta3",
"tau2")])
#cs = need to figure this out
)
spot.rate.curve <- if(method != "dl"){
spotrates(method = method,
beta = Vector,
m = seq(from = 1/12, to = 600/12, by = 1/12))
} else {
spotrates(method = method,
beta = Vector,
m = seq(from = 1/12, to = 600/12, by = 1/12),
lambda = TSFit$lambda)}
forward.rate.curve <- if(method != "dl"){
forwardrates(method = method,
beta = Vector,
m = seq(from = 1/12, to = 600/12, by = 1/12))
} else {
forwardrates(method = method,
beta = Vector,
m = seq(from = 1/12, to = 600/12, by = 1/12),
lambda = TSFit$lambda)
}
time.period <- difftime(seq(as.Date(rates.data[1,1]) %m+% months(1),
by="1 months",
length.out = length(spot.rate.curve)),
as.Date(rates.data[1,1]),
units = "days")/365
time.period
date.vector <- seq(as.Date(USTData[1,1]), by = 'month', length.out = 600)
disc.curve <- round(exp((spot.rate.curve/yield.basis) * -as.numeric(time.period)),8)
yield.basis = 100
disc.curve <- round(exp((spot.rate.curve/yield.basis) * -as.numeric(time.period)),8)
forward.rate <- function(time.period = time.period,
disc.rate = disc.curve,
forward.tenor){
forward.rate = -((log(disc.rate[(forward.tenor + 1) : length(disc.rate)]) -
log(disc.rate[1:(length(disc.rate) - forward.tenor)])) /
(forward.tenor/months.in.year))
forward.rate <- predict(
splines::interpSpline(
seq(1:length(forward.rate)),
forward.rate,
bSpline = TRUE,
na.action = na.omit)
,seq(1:length(forward.rate)))$y
forward.rate = forward.rate * yield.basis
return(forward.rate)
}
Two.Year.Fwd <- forward.rate(forward.tenor = 24)[1:600]
months.in.year = 12
Two.Year.Fwd <- forward.rate(forward.tenor = 24)[1:600]
Ten.Year.Fwd <- forward.rate(forward.tenor = 120)[1:600]
new("TermStructure",
TradeDate = as.character(rates.data[1,1]),
Period = seq(1, 600, 1),
Date = as.character(date.vector),
TimePeriod = as.numeric(time.period),
SpotRate = spot.rate.curve,
ForwardRate = forward.rate.curve,
DiscRate = disc.curve,
TwoYearFwd = Two.Year.Fwd,
TenYearFwd = Ten.Year.Fwd
new("TermStructure",
TradeDate = as.character(rates.data[1,1]),
Period = seq(1, 600, 1),
Date = as.character(date.vector),
TimePeriod = as.numeric(time.period),
SpotRate = spot.rate.curve,
ForwardRate = forward.rate.curve,
DiscRate = disc.curve,
TwoYearFwd = Two.Year.Fwd,
TenYearFwd = Ten.Year.Fwd
)
knitr::opts_chunk$set(cache=FALSE)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
APIKEY <- "31df8645e635484db99e5d1133ce9245"
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "dl")))
library(BondLab)
knitr::opts_chunk$set(cache=FALSE)
require(termstrc)
require(BondLab)
require(sqldf)
require(RSQLite)
APIKEY <- "31df8645e635484db99e5d1133ce9245"
MBSData <- dbConnect(SQLite(), dbname=paste0(system.file(package = "BondLab"), "/BondData/MBSData"))
dbGetQuery(MBSData,
'Select Cusip
,Coupon
,AmortizationTerm
,price
from MBS')
cusip = "31283HY43"
price <- dbGetQuery(MBSData, 'Select price from MBS where cusip = "31283HY43"')
tradedate <- '05-19-2017'
settlementdate <- '06-15-2017'
# note PriceTypes class is used to convert price from string to
# numeric decimal equivilant
Price <- PriceTypes(price = as.character(price))
rates.data <- Rates(trade.date = tradedate)
# note use invisible(capture.output()) to supress messages
invisible(capture.output(
TermStructure <- TermStructure(rates.data = rates.data, method = "dl")))
bond.id <- MBS(cusip = cusip)
MortgageRate <- MtgRate()
ModelTune <- ModelTune(bond.id = bond.id)
#invoke the prepayment model and assign it to object
Prepayment <- PrepaymentModel(bond.id = bond.id,
TermStructure = TermStructure,
MortgageRate = MortgageRate,
ModelTune = ModelTune,
PrepaymentAssumption = "MODEL")
PassThrough <-
MortgageCashFlow(bond.id = bond.id,
original.bal = OriginalBal(bond.id),
settlement.date = settlementdate,
# note: here price is passed as decimal eqivalent string
# internally this function also uses PriceType to convert
# price to a numeric decimal basis
price = PriceDecimalString(Price),
PrepaymentAssumption = Prepayment)
# curve spreads are also returned in the mortgagescenario object
# note: used getter methods on the classes to calculate proceeds
proceeds = OriginalBal(bond.id) *MBSFactor(bond.id) * PriceBasis(Price)
# The class curve spreads calculates curve spreads for reporting
# or in this case to pass zero volatility spread to the total return function
CurveSpreads <- CurveSpreads(rates.data = rates.data,
TermStructure = TermStructure,
CashFlow = PassThrough,
proceeds = proceeds)
library(BondLab)
